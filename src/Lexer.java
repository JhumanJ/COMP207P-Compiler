/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Lexer.lex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\13\1\4\1\2\2\0\1\1\16\13\4\0\1\3\1\47\1\15"+
    "\1\12\1\13\1\13\1\50\1\14\1\61\1\62\1\57\1\55\1\46"+
    "\1\56\1\65\1\11\1\10\11\6\1\43\1\45\1\53\1\44\1\52"+
    "\1\54\1\13\5\5\1\17\5\5\1\5\7\5\1\16\6\5\1\66"+
    "\1\13\1\67\1\60\1\7\1\0\1\21\1\37\1\32\1\31\1\25"+
    "\1\34\1\5\1\41\1\22\1\5\1\40\1\24\1\20\1\23\1\36"+
    "\1\27\1\42\1\30\1\35\1\26\1\33\5\5\1\63\1\51\1\64"+
    "\1\0\41\13\1\0\1\13\4\13\1\0\1\13\2\0\1\13\1\13"+
    "\1\0\1\13\7\0\1\13\2\13\2\0\1\13\1\13\3\0\1\13"+
    "\27\13\1\0\37\13\1\0\u01ca\13\4\0\14\13\16\0\5\13\7\0"+
    "\1\13\1\0\1\13\21\0\165\13\1\0\2\13\2\0\4\13\1\13"+
    "\7\0\1\13\1\13\3\13\1\0\1\13\1\0\24\13\1\0\123\13"+
    "\1\0\213\13\1\0\5\13\2\0\236\13\11\0\46\13\2\0\1\13"+
    "\6\13\1\0\47\13\1\0\2\13\4\0\1\13\1\0\55\13\1\13"+
    "\1\13\1\13\2\13\1\13\2\13\1\13\1\13\10\0\33\13\5\0"+
    "\3\13\2\13\13\0\5\13\4\0\2\13\1\13\2\13\2\0\13\13"+
    "\1\13\2\0\2\13\112\13\4\13\146\13\1\13\11\13\1\0\12\13"+
    "\1\0\23\13\2\0\1\13\16\13\1\0\74\13\2\0\145\13\16\0"+
    "\66\13\1\0\3\13\1\13\5\0\56\13\2\0\17\13\1\0\34\13"+
    "\2\0\1\13\101\0\1\13\1\0\13\13\67\0\33\13\1\0\144\13"+
    "\2\13\12\13\1\13\7\13\1\0\7\13\1\0\3\13\1\0\10\13"+
    "\2\0\2\13\2\0\26\13\1\0\7\13\1\0\1\13\3\0\4\13"+
    "\2\0\11\13\2\0\2\13\2\0\4\13\10\0\1\13\4\0\2\13"+
    "\1\0\5\13\2\0\16\13\7\0\1\13\5\0\3\13\1\0\6\13"+
    "\4\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13\1\0\2\13"+
    "\1\0\2\13\2\0\1\13\1\0\5\13\4\0\2\13\2\0\3\13"+
    "\3\0\1\13\7\0\4\13\1\0\1\13\7\0\20\13\13\0\3\13"+
    "\1\0\11\13\1\0\3\13\1\0\26\13\1\0\7\13\1\0\2\13"+
    "\1\0\5\13\2\0\12\13\1\0\3\13\1\0\3\13\2\0\1\13"+
    "\17\0\4\13\2\0\12\13\1\13\1\13\17\0\3\13\1\0\10\13"+
    "\2\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13\1\0\5\13"+
    "\2\0\11\13\2\0\2\13\2\0\3\13\10\0\2\13\4\0\2\13"+
    "\1\0\5\13\2\0\12\13\1\0\1\13\20\0\2\13\1\0\6\13"+
    "\3\0\3\13\1\0\4\13\3\0\2\13\1\0\1\13\1\0\2\13"+
    "\3\0\2\13\3\0\3\13\3\0\14\13\4\0\5\13\3\0\3\13"+
    "\1\0\4\13\2\0\1\13\6\0\1\13\16\0\12\13\11\0\1\13"+
    "\7\0\3\13\1\0\10\13\1\0\3\13\1\0\27\13\1\0\12\13"+
    "\1\0\5\13\3\0\10\13\1\0\3\13\1\0\4\13\7\0\2\13"+
    "\1\0\2\13\6\0\4\13\2\0\12\13\22\0\2\13\1\0\10\13"+
    "\1\0\3\13\1\0\27\13\1\0\12\13\1\0\5\13\2\0\11\13"+
    "\1\0\3\13\1\0\4\13\7\0\2\13\7\0\1\13\1\0\4\13"+
    "\2\0\12\13\1\0\2\13\17\0\2\13\1\0\10\13\1\0\3\13"+
    "\1\0\51\13\2\0\10\13\1\0\3\13\1\0\5\13\10\0\1\13"+
    "\10\0\4\13\2\0\12\13\12\0\6\13\2\0\2\13\1\0\22\13"+
    "\3\0\30\13\1\0\11\13\1\0\1\13\2\0\7\13\3\0\1\13"+
    "\4\0\6\13\1\0\1\13\1\0\10\13\22\0\2\13\1\13\14\0"+
    "\72\13\4\0\20\13\1\13\12\13\2\13\45\0\2\13\1\0\1\13"+
    "\2\0\2\13\1\0\1\13\2\0\1\13\6\0\4\13\1\0\7\13"+
    "\1\0\3\13\1\0\1\13\1\0\1\13\2\0\2\13\1\0\15\13"+
    "\1\0\3\13\2\0\5\13\1\0\1\13\1\0\6\13\2\0\12\13"+
    "\2\0\4\13\40\0\1\13\3\0\17\13\1\0\1\13\3\0\2\13"+
    "\6\0\12\13\13\0\1\13\1\0\1\13\1\0\1\13\4\13\12\13"+
    "\1\0\44\13\4\0\24\13\1\13\22\13\1\0\44\13\11\0\1\13"+
    "\11\0\5\13\4\0\2\13\45\0\112\13\6\13\116\13\2\0\46\13"+
    "\1\0\1\13\5\0\1\13\2\0\53\13\1\13\u014d\13\1\0\4\13"+
    "\2\0\7\13\1\0\1\13\1\0\4\13\2\0\51\13\1\0\4\13"+
    "\2\0\41\13\1\0\4\13\2\0\7\13\1\0\1\13\1\0\4\13"+
    "\2\0\17\13\1\0\71\13\1\0\4\13\2\0\103\13\2\0\3\13"+
    "\11\13\27\0\20\13\20\0\125\13\13\0\1\13\u026c\13\2\13\21\13"+
    "\1\0\32\13\2\13\3\0\113\13\3\13\3\13\17\0\15\13\1\0"+
    "\7\13\13\0\25\13\2\13\11\0\24\13\14\0\15\13\1\0\3\13"+
    "\1\0\2\13\14\0\124\13\3\13\1\13\3\13\3\13\2\0\12\13"+
    "\26\0\13\13\3\13\2\0\12\13\6\0\130\13\10\0\53\13\5\0"+
    "\106\13\12\0\35\13\3\0\14\13\4\0\14\13\10\0\2\13\50\13"+
    "\2\0\5\13\13\0\54\13\4\0\32\13\6\0\12\13\46\0\34\13"+
    "\2\0\2\13\77\13\1\0\35\13\2\0\13\13\6\0\12\13\6\0"+
    "\7\13\1\13\6\13\122\0\114\13\4\0\12\13\7\13\12\0\11\13"+
    "\14\0\164\13\10\0\4\13\70\13\3\0\5\13\12\13\3\0\61\13"+
    "\2\13\100\0\10\13\10\0\3\13\1\13\43\13\11\0\347\13\25\0"+
    "\u011a\13\2\0\6\13\2\0\46\13\2\0\6\13\2\0\10\13\1\0"+
    "\1\13\1\0\1\13\1\0\1\13\1\0\37\13\2\0\65\13\1\0"+
    "\7\13\1\0\1\13\3\0\3\13\1\0\7\13\3\0\4\13\2\0"+
    "\6\13\4\0\15\13\5\0\3\13\1\0\7\13\16\0\5\13\30\13"+
    "\2\0\5\13\1\0\17\13\2\13\3\13\1\0\15\13\1\0\1\13"+
    "\1\13\12\13\1\0\5\13\5\0\6\13\1\0\1\13\13\0\2\13"+
    "\1\13\15\0\2\13\1\0\15\13\3\0\33\13\25\0\15\13\4\0"+
    "\1\13\3\0\14\13\21\0\1\13\4\0\1\13\2\0\12\13\1\0"+
    "\1\13\3\0\5\13\6\0\1\13\1\0\1\13\1\0\1\13\1\0"+
    "\4\13\1\0\13\13\2\0\4\13\5\0\5\13\4\0\1\13\21\0"+
    "\51\13\u017f\0\4\13\35\0\2\13\u043d\0\16\13\117\0\2\13\37\0"+
    "\12\13\u0193\0\26\13\77\0\4\13\40\0\2\13\u0202\0\57\13\1\0"+
    "\57\13\1\0\205\13\6\0\11\13\5\0\4\13\1\0\2\13\46\13"+
    "\1\0\1\13\5\0\1\13\2\0\70\13\7\0\1\13\1\13\16\0"+
    "\30\13\11\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13\1\0"+
    "\7\13\1\0\7\13\1\0\7\13\1\0\7\13\1\0\40\13\57\13"+
    "\1\13\23\13\u01be\0\3\13\1\0\3\13\12\13\2\0\14\13\1\0"+
    "\17\13\1\13\5\13\2\0\5\13\1\13\3\0\126\13\2\0\2\13"+
    "\2\0\3\13\1\13\132\13\1\13\4\13\5\0\51\13\3\0\136\13"+
    "\21\0\33\13\65\0\20\13\u0200\0\u19b6\13\112\0\u51cd\13\63\0\u048d\13"+
    "\103\0\56\13\2\13\u010d\13\3\13\34\13\24\0\60\13\3\0\1\13"+
    "\12\13\1\13\31\13\7\0\123\13\6\13\37\0\11\13\2\0\147\13"+
    "\2\0\4\13\1\0\4\13\14\0\13\13\115\0\60\13\20\0\1\13"+
    "\7\0\64\13\4\13\10\0\105\13\11\0\2\13\12\13\6\0\30\13"+
    "\3\13\1\13\4\0\56\13\2\13\44\13\13\0\1\13\35\13\3\0"+
    "\101\13\15\13\1\0\13\13\4\0\2\13\40\0\67\13\11\0\16\13"+
    "\2\0\12\13\2\0\4\13\27\13\3\0\2\13\4\0\103\13\30\0"+
    "\3\13\2\13\20\13\2\13\5\13\12\0\6\13\2\0\6\13\2\0"+
    "\6\13\11\0\7\13\1\0\7\13\221\0\53\13\1\13\2\13\2\0"+
    "\12\13\6\0\u2ba4\13\14\0\27\13\4\0\61\13\u2104\0\u016e\13\2\0"+
    "\152\13\46\0\7\13\14\0\5\13\5\0\14\13\1\0\15\13\1\0"+
    "\5\13\1\0\1\13\1\0\2\13\1\0\2\13\1\0\154\13\41\0"+
    "\u016b\13\2\13\20\0\100\13\2\0\66\13\50\0\15\13\3\0\20\13"+
    "\12\13\6\0\7\13\11\0\3\13\2\13\30\13\3\13\3\13\1\0"+
    "\16\13\1\0\1\13\4\0\1\13\1\13\2\13\4\0\5\13\1\0"+
    "\207\13\2\0\1\13\1\0\3\13\1\13\6\13\1\0\4\13\12\13"+
    "\2\13\3\0\2\13\32\13\3\13\1\0\1\13\1\0\32\13\1\13"+
    "\1\0\1\13\1\0\7\13\131\13\3\0\6\13\2\0\6\13\2\0"+
    "\6\13\2\0\3\13\3\0\2\13\3\0\2\13\22\0\3\13\4\0"+
    "\14\13\1\0\32\13\1\0\23\13\1\0\2\13\1\0\17\13\2\0"+
    "\16\13\42\0\173\13\5\0\3\13\75\0\65\13\210\0\1\13\202\0"+
    "\35\13\3\0\61\13\57\0\37\13\21\0\33\13\65\0\36\13\1\0"+
    "\1\13\44\13\4\0\10\13\1\13\5\13\52\0\236\13\2\0\12\13"+
    "\305\0\1\13\u0290\0\6\13\2\0\1\13\1\0\54\13\1\0\2\13"+
    "\3\0\1\13\2\0\27\13\1\0\1\13\250\0\26\13\11\0\1\13"+
    "\32\13\5\0\1\13\100\0\70\13\6\0\2\13\100\0\4\13\1\0"+
    "\2\13\5\0\10\13\1\0\3\13\1\0\33\13\4\0\3\13\4\0"+
    "\1\13\20\0\11\13\7\0\35\13\2\0\1\13\160\0\7\13\11\0"+
    "\66\13\3\0\7\13\26\13\12\0\23\13\46\0\4\13\143\0\111\13"+
    "\u03b7\0\107\13\7\13\30\0\12\13\20\0\73\13\2\13\1\13\4\13"+
    "\16\0\31\13\7\0\12\13\6\0\65\13\1\0\12\13\4\13\60\0"+
    "\2\13\12\0\105\13\4\13\4\0\1\13\2\0\12\13\136\0\6\13"+
    "\u0288\0\1\13\372\0\11\13\167\0\3\13\74\0\70\13\10\0\12\13"+
    "\u0936\0\u036f\13\221\0\143\13\15\0\5\13\u0b8b\0\u042f\13\u33d1\0\u0239\13"+
    "\65\0\2\13\205\0\1\13\101\0\5\13\10\0\1\13\u03bb\0\105\13"+
    "\13\0\57\13\20\0\21\13\u4060\0\2\13\u0c9d\0\1\13\u14c5\0\5\13"+
    "\3\0\26\13\2\0\7\13\36\0\4\13\224\0\3\13\u01bb\0\125\13"+
    "\1\0\107\13\1\0\2\13\2\0\1\13\2\0\2\13\2\0\4\13"+
    "\1\0\14\13\1\0\1\13\1\0\7\13\1\0\101\13\1\0\4\13"+
    "\2\0\10\13\1\0\7\13\1\0\34\13\1\0\4\13\1\0\5\13"+
    "\1\0\1\13\3\0\7\13\1\0\u0154\13\2\0\31\13\1\0\31\13"+
    "\1\0\37\13\1\0\31\13\1\0\37\13\1\0\31\13\1\0\37\13"+
    "\1\0\31\13\1\0\37\13\1\0\31\13\1\0\10\13\2\0\62\13"+
    "\u1600\0\4\13\1\0\33\13\1\0\2\13\1\0\1\13\2\0\1\13"+
    "\1\0\12\13\1\0\4\13\1\0\1\13\1\0\1\13\6\0\1\13"+
    "\4\0\1\13\1\0\1\13\1\0\1\13\1\0\3\13\1\0\2\13"+
    "\1\0\1\13\2\0\1\13\1\0\1\13\1\0\1\13\1\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\0\1\13\2\0\4\13\1\0\7\13"+
    "\1\0\4\13\1\0\4\13\1\0\1\13\1\0\12\13\1\0\21\13"+
    "\5\0\3\13\1\0\5\13\1\0\21\13\u1144\0\ua6d7\13\51\0\u1035\13"+
    "\13\0\336\13\u3fe2\0\u021e\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\13\36\0\140\13\200\0\360\13\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\4\1\6"+
    "\1\2\2\1\1\7\1\10\15\3\1\11\1\12\1\13"+
    "\1\14\1\15\2\1\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\3\0\1\34\2\3\1\35\1\36\14\3\1\37"+
    "\5\3\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\2\0\1\47\2\3\1\50\1\51\1\52\3\3\1\53"+
    "\3\3\1\54\6\3\1\55\2\3\1\0\1\56\1\3"+
    "\1\57\1\60\1\61\1\62\1\3\1\63\1\64\1\3"+
    "\1\65\1\66\1\3\1\67\1\3\1\70\1\71\1\72"+
    "\1\3\1\73\1\74\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\70\0\250\0\340\0\70\0\70"+
    "\0\u0118\0\u0150\0\u0188\0\u01c0\0\250\0\250\0\u01f8\0\u0230"+
    "\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0"+
    "\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508\0\70\0\70\0\u0540"+
    "\0\u0578\0\u05b0\0\70\0\u05e8\0\70\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\70\0\70"+
    "\0\u0620\0\u0658\0\u01c0\0\u01c0\0\u0690\0\u06c8\0\u0700\0\250"+
    "\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0"+
    "\0\u08f8\0\u0930\0\u0968\0\u09a0\0\250\0\u09d8\0\u0a10\0\u0a48"+
    "\0\u0a80\0\u0ab8\0\70\0\70\0\70\0\70\0\70\0\70"+
    "\0\70\0\u0af0\0\u0b28\0\70\0\u0b60\0\u0b98\0\250\0\250"+
    "\0\250\0\u0bd0\0\u0c08\0\u0c40\0\250\0\u0c78\0\u0cb0\0\u0ce8"+
    "\0\250\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\250"+
    "\0\u0e70\0\u0ea8\0\u0ee0\0\250\0\u0f18\0\250\0\250\0\250"+
    "\0\250\0\u0f50\0\250\0\250\0\u0f88\0\250\0\250\0\u0fc0"+
    "\0\250\0\u0ff8\0\250\0\250\0\250\0\u1030\0\250\0\250"+
    "\0\250";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\3\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\2\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\5\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\5\1\31\1\32\1\5\1\33\3\5\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\72\0\1\4\72\0\4\5"+
    "\5\0\25\5\33\0\1\6\1\0\1\6\71\0\1\61"+
    "\55\0\12\12\1\0\55\12\3\0\1\62\1\0\37\62"+
    "\1\0\4\62\3\0\1\62\1\0\2\62\1\0\7\62"+
    "\3\0\1\63\1\0\10\63\1\64\26\63\1\0\4\63"+
    "\3\0\1\63\1\0\2\63\1\0\7\63\5\0\4\5"+
    "\5\0\3\5\1\65\21\5\32\0\4\5\5\0\6\5"+
    "\1\66\16\5\32\0\4\5\5\0\5\5\1\67\10\5"+
    "\1\70\6\5\32\0\4\5\5\0\7\5\1\71\10\5"+
    "\1\72\4\5\32\0\4\5\5\0\6\5\1\73\16\5"+
    "\32\0\4\5\5\0\13\5\1\74\4\5\1\75\2\5"+
    "\1\76\1\5\32\0\4\5\5\0\12\5\1\77\5\5"+
    "\1\100\4\5\32\0\4\5\5\0\3\5\1\101\3\5"+
    "\1\102\15\5\32\0\4\5\5\0\4\5\1\103\20\5"+
    "\32\0\4\5\5\0\23\5\1\104\1\5\32\0\4\5"+
    "\5\0\4\5\1\105\1\5\1\106\4\5\1\107\11\5"+
    "\32\0\4\5\5\0\7\5\1\110\15\5\32\0\4\5"+
    "\5\0\12\5\1\111\5\5\1\112\4\5\70\0\1\113"+
    "\1\114\75\0\1\115\61\0\1\116\73\0\1\117\70\0"+
    "\1\120\62\0\1\121\23\0\12\122\1\123\55\122\14\0"+
    "\1\124\60\0\4\5\5\0\4\5\1\125\20\5\32\0"+
    "\4\5\5\0\4\5\1\126\20\5\32\0\4\5\5\0"+
    "\10\5\1\127\14\5\32\0\4\5\5\0\5\5\1\130"+
    "\2\5\1\131\14\5\32\0\4\5\5\0\20\5\1\132"+
    "\4\5\32\0\4\5\5\0\17\5\1\133\5\5\32\0"+
    "\4\5\5\0\7\5\1\134\15\5\32\0\4\5\5\0"+
    "\11\5\1\135\13\5\32\0\4\5\5\0\7\5\1\136"+
    "\15\5\32\0\4\5\5\0\4\5\1\137\20\5\32\0"+
    "\4\5\5\0\20\5\1\140\4\5\32\0\4\5\5\0"+
    "\10\5\1\141\14\5\32\0\4\5\5\0\3\5\1\142"+
    "\4\5\1\143\14\5\32\0\4\5\5\0\14\5\1\144"+
    "\10\5\32\0\4\5\5\0\3\5\1\145\21\5\32\0"+
    "\4\5\5\0\20\5\1\146\4\5\32\0\4\5\5\0"+
    "\7\5\1\147\15\5\32\0\4\5\5\0\24\5\1\150"+
    "\32\0\4\5\5\0\7\5\1\151\15\5\32\0\4\5"+
    "\5\0\20\5\1\152\4\5\25\0\12\122\1\153\55\122"+
    "\11\0\1\4\1\123\62\0\4\5\5\0\5\5\1\154"+
    "\17\5\32\0\4\5\5\0\3\5\1\155\21\5\32\0"+
    "\4\5\5\0\11\5\1\156\13\5\32\0\4\5\5\0"+
    "\7\5\1\157\15\5\32\0\4\5\5\0\16\5\1\160"+
    "\6\5\32\0\4\5\5\0\5\5\1\161\17\5\32\0"+
    "\4\5\5\0\5\5\1\162\17\5\32\0\4\5\5\0"+
    "\6\5\1\163\16\5\32\0\4\5\5\0\13\5\1\164"+
    "\11\5\32\0\4\5\5\0\15\5\1\165\7\5\32\0"+
    "\4\5\5\0\10\5\1\166\14\5\32\0\4\5\5\0"+
    "\12\5\1\167\12\5\32\0\4\5\5\0\3\5\1\170"+
    "\21\5\32\0\4\5\5\0\16\5\1\171\6\5\32\0"+
    "\4\5\5\0\3\5\1\172\21\5\32\0\4\5\5\0"+
    "\6\5\1\173\16\5\25\0\11\122\1\4\1\153\55\122"+
    "\5\0\4\5\5\0\17\5\1\174\5\5\32\0\4\5"+
    "\5\0\10\5\1\175\14\5\32\0\4\5\5\0\12\5"+
    "\1\176\12\5\32\0\4\5\5\0\10\5\1\177\14\5"+
    "\32\0\4\5\5\0\22\5\1\200\2\5\32\0\4\5"+
    "\5\0\5\5\1\201\17\5\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\2\11\25\1\2\11"+
    "\3\1\1\11\1\1\14\11\3\0\27\1\7\11\2\0"+
    "\1\11\26\1\1\0\26\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private boolean debug_mode;
  public  boolean debug()            { return debug_mode; }
  public  void    debug(boolean mode){ debug_mode = mode; }

//  Function print_lexeme
  private void print_lexeme(int type, Object value){
    if(!debug()){ return; }

    System.out.print("<");
    switch(type){
      case sym.LET:
        System.out.print("LET"); break;
      case sym.EQUAL:
        System.out.print(":="); break;
      case sym.SEMICOL:
        System.out.print(";"); break;
      case sym.PLUS:
        System.out.print("+"); break;
      case sym.MINUS:
        System.out.print("-"); break;
      case sym.MULT:
        System.out.print("*"); break;
      case sym.DIV:
        System.out.print("/"); break;
      case sym.LPAREN:
        System.out.print("("); break;
      case sym.RPAREN:
        System.out.print(")"); break;
      case sym.INTEGER:
        System.out.printf("INT %d", value); break;
      case sym.IDENTIFIER:
        System.out.printf("IDENT %s", value); break;
      case sym.MAIN:
        System.out.print("main"); break;
      case sym.LBRA:
            System.out.print("{"); break;
      case sym.RBRA:
            System.out.print("}"); break;
      case sym.PRINT:
            System.out.print("print"); break;
      case sym.CHAR:
            System.out.printf("CHAR %c", value); break;


    }
    System.out.print(">  ");
  }

  private Symbol symbol(int type) {
    print_lexeme(type, null);
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    print_lexeme(type, value);
    return new Symbol(type, yyline, yycolumn, value);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2828) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("file:" + (yyline+1) +
    ":0: Error: Invalid input '" + yytext()+"'");
  return symbol(sym.BADCHAR);
            }
          case 62: break;
          case 2: 
            { /* do nothing */
            }
          case 63: break;
          case 3: 
            { return symbol(sym.IDENTIFIER, yytext());
            }
          case 64: break;
          case 4: 
            { return symbol(sym.INTEGER,Integer.parseInt(yytext()));
            }
          case 65: break;
          case 5: 
            { return symbol(sym.UNDERSCORE);
            }
          case 66: break;
          case 6: 
            { return symbol(sym.DIV);
            }
          case 67: break;
          case 7: 
            { return symbol(sym.TRUE);
            }
          case 68: break;
          case 8: 
            { return symbol(sym.FALSE);
            }
          case 69: break;
          case 9: 
            { return symbol(sym.COLON);
            }
          case 70: break;
          case 10: 
            { return symbol(sym.EQ);
            }
          case 71: break;
          case 11: 
            { return symbol(sym.SEMICOL);
            }
          case 72: break;
          case 12: 
            { return symbol(sym.COMMA);
            }
          case 73: break;
          case 13: 
            { return symbol(sym.EXCLAM);
            }
          case 74: break;
          case 14: 
            { return symbol(sym.RCROCHET);
            }
          case 75: break;
          case 15: 
            { return symbol(sym.LCROCHET);
            }
          case 76: break;
          case 16: 
            { return symbol(sym.QUESTION);
            }
          case 77: break;
          case 17: 
            { return symbol(sym.PLUS);
            }
          case 78: break;
          case 18: 
            { return symbol(sym.MINUS);
            }
          case 79: break;
          case 19: 
            { return symbol(sym.MULT);
            }
          case 80: break;
          case 20: 
            { return symbol(sym.EXPO);
            }
          case 81: break;
          case 21: 
            { return symbol(sym.LPAREN);
            }
          case 82: break;
          case 22: 
            { return symbol(sym.RPAREN);
            }
          case 83: break;
          case 23: 
            { return symbol(sym.LBRA);
            }
          case 84: break;
          case 24: 
            { return symbol(sym.RBRA);
            }
          case 85: break;
          case 25: 
            { return symbol(sym.DOT);
            }
          case 86: break;
          case 26: 
            { return symbol(sym.LAGRA);
            }
          case 87: break;
          case 27: 
            { return symbol(sym.RAGRA);
            }
          case 88: break;
          case 28: 
            { return symbol(sym.STRING);
            }
          case 89: break;
          case 29: 
            { return symbol(sym.IN);
            }
          case 90: break;
          case 30: 
            { return symbol(sym.IF);
            }
          case 91: break;
          case 31: 
            { return symbol(sym.FI);
            }
          case 92: break;
          case 32: 
            { return symbol(sym.DOUBLE_COLON);
            }
          case 93: break;
          case 33: 
            { return symbol(sym.EQUAL);
            }
          case 94: break;
          case 34: 
            { return symbol(sym.IMPL);
            }
          case 95: break;
          case 35: 
            { return symbol(sym.DIFF);
            }
          case 96: break;
          case 36: 
            { return symbol(sym.AND);
            }
          case 97: break;
          case 37: 
            { return symbol(sym.OR);
            }
          case 98: break;
          case 38: 
            { return symbol(sym.INFEQ);
            }
          case 99: break;
          case 39: 
            { return symbol(sym.CHAR);
            }
          case 100: break;
          case 40: 
            { return symbol(sym.TYPE_INT);
            }
          case 101: break;
          case 41: 
            { return symbol(sym.LEN);
            }
          case 102: break;
          case 42: 
            { return symbol(sym.LET);
            }
          case 103: break;
          case 43: 
            { return symbol(sym.TOP);
            }
          case 104: break;
          case 44: 
            { return symbol(sym.TYPE_RAT);
            }
          case 105: break;
          case 45: 
            { return symbol(sym.SEQ);
            }
          case 106: break;
          case 46: 
            { return symbol(sym.MAIN);
            }
          case 107: break;
          case 47: 
            { return symbol(sym.LOOP);
            }
          case 108: break;
          case 48: 
            { return symbol(sym.ELSE);
            }
          case 109: break;
          case 49: 
            { return symbol(sym.TDEF);
            }
          case 110: break;
          case 50: 
            { return symbol(sym.THEN);
            }
          case 111: break;
          case 51: 
            { return symbol(sym.POOL);
            }
          case 112: break;
          case 52: 
            { return symbol(sym.READ);
            }
          case 113: break;
          case 53: 
            { return symbol(sym.DICT);
            }
          case 114: break;
          case 54: 
            { return symbol(sym.TYPE_CHAR);
            }
          case 115: break;
          case 55: 
            { return symbol(sym.FDEF);
            }
          case 116: break;
          case 56: 
            { return symbol(sym.TYPE_BOOL);
            }
          case 117: break;
          case 57: 
            { return symbol(sym.ALIAS);
            }
          case 118: break;
          case 58: 
            { return symbol(sym.PRINT);
            }
          case 119: break;
          case 59: 
            { return symbol(sym.TYPE_FLOAT);
            }
          case 120: break;
          case 60: 
            { return symbol(sym.BREAK);
            }
          case 121: break;
          case 61: 
            { return symbol(sym.RETURN);
            }
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
