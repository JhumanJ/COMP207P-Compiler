
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\252\000\002\064\003\000\002\002\004\000\002\064" +
    "\004\000\002\064\004\000\002\064\005\000\002\076\004" +
    "\000\002\076\003\000\002\077\003\000\002\077\003\000" +
    "\002\036\006\000\002\017\003\000\002\017\003\000\002" +
    "\022\004\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\023\003" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\011\003\000\002" +
    "\042\003\000\002\042\005\000\002\004\003\000\002\004" +
    "\004\000\002\005\005\000\002\006\005\000\002\012\003" +
    "\000\002\012\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\015\003\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\013\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\002\010\000\002\002\010\000" +
    "\002\002\010\000\002\002\010\000\002\007\005\000\002" +
    "\025\003\000\002\025\005\000\002\025\002\000\002\024" +
    "\005\000\002\003\006\000\002\003\006\000\002\020\005" +
    "\000\002\020\003\000\002\010\003\000\002\026\003\000" +
    "\002\026\005\000\002\026\002\000\002\027\005\000\002" +
    "\031\006\000\002\031\006\000\002\030\005\000\002\032" +
    "\010\000\002\032\007\000\002\032\007\000\002\021\005" +
    "\000\002\021\005\000\002\045\003\000\002\045\005\000" +
    "\002\046\005\000\002\047\003\000\002\047\005\000\002" +
    "\051\010\000\002\052\006\000\002\053\013\000\002\053" +
    "\015\000\002\050\003\000\002\050\003\000\002\050\005" +
    "\000\002\050\005\000\002\054\010\000\002\054\010\000" +
    "\002\054\011\000\002\054\011\000\002\055\005\000\002" +
    "\055\005\000\002\055\004\000\002\055\005\000\002\055" +
    "\003\000\002\055\005\000\002\055\005\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\057\003\000\002" +
    "\057\003\000\002\060\003\000\002\060\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\063\003\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\065\006\000\002\065" +
    "\006\000\002\074\010\000\002\066\005\000\002\067\005" +
    "\000\002\067\005\000\002\070\005\000\002\070\005\000" +
    "\002\070\004\000\002\071\005\000\002\072\004\000\002" +
    "\072\005\000\002\073\011\000\002\073\013\000\002\075" +
    "\007\000\002\034\004\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\033\004\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\010\004\014\052\006\062\011\001\002\000" +
    "\012\002\ufff9\004\ufff9\052\ufff9\062\ufff9\001\002\000\010" +
    "\002\001\004\014\062\011\001\002\000\004\041\364\001" +
    "\002\000\004\002\363\001\002\000\004\052\006\001\002" +
    "\000\004\004\257\001\002\000\012\002\ufffa\004\ufffa\052" +
    "\ufffa\062\ufffa\001\002\000\004\021\021\001\002\000\056" +
    "\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\015" +
    "\017\016\uff9f\020\uff9f\021\uff9f\022\uff9f\024\uff9f\026\uff9f" +
    "\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035" +
    "\uff9f\037\uff9f\040\uff9f\001\002\000\012\002\ufffb\004\014" +
    "\052\ufffb\062\011\001\002\000\006\002\ufffc\052\ufffc\001" +
    "\002\000\004\004\014\001\002\000\054\006\uff9e\007\uff9e" +
    "\010\uff9e\011\uff9e\012\uff9e\013\uff9e\016\uff9e\020\uff9e\021" +
    "\uff9e\022\uff9e\024\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e" +
    "\032\uff9e\033\uff9e\034\uff9e\035\uff9e\037\uff9e\040\uff9e\001" +
    "\002\000\022\004\034\054\023\055\027\066\033\067\031" +
    "\070\022\071\025\072\030\001\002\000\014\006\uffc7\007" +
    "\uffc7\017\uffc7\020\uffc7\037\uffc7\001\002\000\004\016\242" +
    "\001\002\000\014\006\uffc3\007\uffc3\017\uffc3\020\uffc3\037" +
    "\uffc3\001\002\000\014\006\uffc6\007\uffc6\017\uffc6\020\uffc6" +
    "\037\uffc6\001\002\000\014\006\uffc4\007\uffc4\017\uffc4\020" +
    "\uffc4\037\uffc4\001\002\000\004\016\235\001\002\000\014" +
    "\006\uffc5\007\uffc5\017\uffc5\020\uffc5\037\uffc5\001\002\000" +
    "\014\006\uffc8\007\uffc8\017\uffc8\020\uffc8\037\uffc8\001\002" +
    "\000\004\006\035\001\002\000\014\006\uffc9\007\uffc9\017" +
    "\uffc9\020\uffc9\037\uffc9\001\002\000\014\006\uffc2\007\uffc2" +
    "\017\uffc2\020\uffc2\037\uffc2\001\002\000\032\004\046\011" +
    "\072\023\060\025\065\035\041\036\057\041\055\073\053" +
    "\074\071\075\042\076\073\077\064\001\002\000\016\007" +
    "\uffbf\020\uffbf\021\uffbf\024\uffbf\037\uffbf\040\uffbf\001\002" +
    "\000\054\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014" +
    "\102\015\uffe6\016\uffe6\020\uffe6\021\uffe6\022\uffe6\024\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\037\uffe6\040\uffe6\001\002\000\034\010\211\011\223" +
    "\012\220\013\221\016\215\022\226\026\207\027\213\030" +
    "\210\031\225\032\227\033\217\034\212\001\002\000\010" +
    "\004\014\073\053\074\071\001\002\000\016\007\uffc1\020" +
    "\uffc1\021\uffc1\024\uffc1\037\uffc1\040\uffc1\001\002\000\042" +
    "\007\uffca\010\uff87\011\uff87\012\uff87\013\uff87\016\uff87\020" +
    "\uffca\022\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87" +
    "\033\uff87\034\uff87\037\uffca\001\002\000\050\007\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\016\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\024\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\037\uffe0\040\uffe0\001\002\000\050" +
    "\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\016\uffac\020" +
    "\uffac\021\uffac\022\uffac\024\uffac\026\uffac\027\uffac\030\uffac" +
    "\031\uffac\032\uffac\033\uffac\034\uffac\037\uffac\040\uffac\001" +
    "\002\000\056\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f" +
    "\013\uff9f\015\150\016\uff9f\020\uff9f\021\uff9f\022\uff9f\023" +
    "\147\024\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f" +
    "\033\uff9f\034\uff9f\037\uff9f\040\uff9f\001\002\000\042\007" +
    "\uffba\010\uff83\011\uff83\012\uff83\013\uff83\016\uff83\020\uffba" +
    "\022\uff83\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033" +
    "\uff83\034\uff83\037\uffba\001\002\000\010\007\uff96\020\145" +
    "\037\uff96\001\002\000\042\007\uffbd\010\uff85\011\uff85\012" +
    "\uff85\013\uff85\016\uff85\020\uffbd\022\uff85\026\uff85\027\uff85" +
    "\030\uff85\031\uff85\032\uff85\033\uff85\034\uff85\037\uffbd\001" +
    "\002\000\042\007\uffbc\010\uff82\011\uff82\012\uff82\013\uff82" +
    "\016\uff82\020\uffbc\022\uff82\026\uff82\027\uff82\030\uff82\031" +
    "\uff82\032\uff82\033\uff82\034\uff82\037\uffbc\001\002\000\052" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\016\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\024\ufff6\026\ufff6\027\ufff6\030\ufff6" +
    "\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\037\ufff6\040" +
    "\ufff6\001\002\000\010\007\uff95\020\143\037\uff95\001\002" +
    "\000\026\004\046\011\072\023\060\040\uffb2\041\055\073" +
    "\053\074\071\075\042\076\073\077\064\001\002\000\050" +
    "\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\016\uffde\020" +
    "\uffde\021\uffde\022\uffde\024\uffde\026\uffde\027\uffde\030\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\037\uffde\040\uffde\001" +
    "\002\000\026\004\046\011\072\023\060\025\065\035\041" +
    "\036\057\041\055\073\053\074\071\076\073\001\002\000" +
    "\026\004\046\011\072\023\060\024\uffa9\041\055\073\053" +
    "\074\071\075\042\076\073\077\064\001\002\000\010\007" +
    "\uff8a\020\uff8a\037\uff8a\001\002\000\042\007\uffe9\010\uff86" +
    "\011\uff86\012\uff86\013\uff86\016\uff86\020\uffe9\022\uff86\026" +
    "\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86" +
    "\037\uffe9\001\002\000\050\007\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\016\uffe2\020\uffe2\021\uffe2\022\uffe2\024\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\037\uffe2\040\uffe2\001\002\000\016\007\uffbb\020\uffbb" +
    "\021\uffbb\024\uffbb\037\uffbb\040\uffbb\001\002\000\026\004" +
    "\046\011\072\023\060\025\065\035\041\036\057\041\055" +
    "\073\053\074\071\076\073\001\002\000\050\007\uffad\010" +
    "\uffad\011\uffad\012\uffad\013\uffad\016\uffad\020\uffad\021\uffad" +
    "\022\uffad\024\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032" +
    "\uffad\033\uffad\034\uffad\037\uffad\040\uffad\001\002\000\050" +
    "\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\016\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\024\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\034\uffdf\037\uffdf\040\uffdf\001" +
    "\002\000\016\007\uffc0\020\uffc0\021\uffc0\024\uffc0\037\uffc0" +
    "\040\uffc0\001\002\000\052\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\016\ufff7\020\ufff7\021\ufff7\022\ufff7\024\ufff7" +
    "\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\037\ufff7\040\ufff7\001\002\000\004\076\073" +
    "\001\002\000\054\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\024\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\037\uffe8\040\uffe8\001\002\000\004\007\105" +
    "\001\002\000\052\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013" +
    "\077\015\100\016\uffe1\020\uffe1\021\uffe1\022\uffe1\024\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\037\uffe1\040\uffe1\001\002\000\042\007\uffbe\010\uff84" +
    "\011\uff84\012\uff84\013\uff84\016\uff84\020\uffbe\022\uff84\026" +
    "\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84" +
    "\037\uffbe\001\002\000\006\011\072\076\073\001\002\000" +
    "\004\076\073\001\002\000\052\007\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\102\016\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\024\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\037\uffe3\040\uffe3\001\002\000\004\076" +
    "\103\001\002\000\054\007\uffe7\010\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\024\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\037\uffe7\040\uffe7\001\002\000\050\007" +
    "\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\016\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\024\uffe4\026\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\037\uffe4\040\uffe4\001\002" +
    "\000\060\002\uff6f\004\uff6f\011\uff6f\023\uff6f\025\uff6f\035" +
    "\uff6f\036\uff6f\040\uff6f\041\uff6f\043\uff6f\044\uff6f\045\uff6f" +
    "\047\uff6f\050\uff6f\051\uff6f\052\uff6f\053\uff6f\062\uff6f\064" +
    "\uff6f\065\uff6f\073\uff6f\074\uff6f\076\uff6f\001\002\000\054" +
    "\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\102\015" +
    "\uffe5\016\uffe5\020\uffe5\021\uffe5\022\uffe5\024\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\037" +
    "\uffe5\040\uffe5\001\002\000\042\007\uff87\010\uff87\011\uff87" +
    "\012\uff87\013\uff87\016\uff87\020\uff87\022\uff87\026\uff87\027" +
    "\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034\uff87\037\uff87" +
    "\001\002\000\042\007\uff83\010\uff83\011\uff83\012\uff83\013" +
    "\uff83\016\uff83\020\uff83\022\uff83\026\uff83\027\uff83\030\uff83" +
    "\031\uff83\032\uff83\033\uff83\034\uff83\037\uff83\001\002\000" +
    "\042\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85\016\uff85" +
    "\020\uff85\022\uff85\026\uff85\027\uff85\030\uff85\031\uff85\032" +
    "\uff85\033\uff85\034\uff85\037\uff85\001\002\000\042\007\uff82" +
    "\010\uff82\011\uff82\012\uff82\013\uff82\016\uff82\020\uff82\022" +
    "\uff82\026\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82" +
    "\034\uff82\037\uff82\001\002\000\010\007\uff8c\020\uff8c\037" +
    "\uff8c\001\002\000\042\007\uff86\010\uff86\011\uff86\012\uff86" +
    "\013\uff86\016\uff86\020\uff86\022\uff86\026\uff86\027\uff86\030" +
    "\uff86\031\uff86\032\uff86\033\uff86\034\uff86\037\uff86\001\002" +
    "\000\042\007\uff84\010\uff84\011\uff84\012\uff84\013\uff84\016" +
    "\uff84\020\uff84\022\uff84\026\uff84\027\uff84\030\uff84\031\uff84" +
    "\032\uff84\033\uff84\034\uff84\037\uff84\001\002\000\014\007" +
    "\uffca\020\uffca\021\uffca\024\uffca\040\uffca\001\002\000\014" +
    "\007\uffba\020\uffba\021\uffba\024\uffba\040\uffba\001\002\000" +
    "\006\020\127\024\uffab\001\002\000\014\007\uffbd\020\uffbd" +
    "\021\uffbd\024\uffbd\040\uffbd\001\002\000\014\007\uffbc\020" +
    "\uffbc\021\uffbc\024\uffbc\040\uffbc\001\002\000\004\024\126" +
    "\001\002\000\016\007\uffe9\020\uffe9\021\uffe9\024\uffe9\035" +
    "\uffe9\040\uffe9\001\002\000\014\007\uffbe\020\uffbe\021\uffbe" +
    "\024\uffbe\040\uffbe\001\002\000\050\007\uffae\010\uffae\011" +
    "\uffae\012\uffae\013\uffae\016\uffae\020\uffae\021\uffae\022\uffae" +
    "\024\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033" +
    "\uffae\034\uffae\037\uffae\040\uffae\001\002\000\026\004\046" +
    "\011\072\023\060\024\uffa9\041\055\073\053\074\071\075" +
    "\042\076\073\077\064\001\002\000\004\024\uffaa\001\002" +
    "\000\004\037\132\001\002\000\010\007\uff8b\020\uff8b\037" +
    "\uff8b\001\002\000\004\021\141\001\002\000\004\040\140" +
    "\001\002\000\006\020\136\040\uffb4\001\002\000\026\004" +
    "\046\011\072\023\060\040\uffb2\041\055\073\053\074\071" +
    "\075\042\076\073\077\064\001\002\000\004\040\uffb3\001" +
    "\002\000\050\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5" +
    "\016\uffb5\020\uffb5\021\uffb5\022\uffb5\024\uffb5\026\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\037\uffb5" +
    "\040\uffb5\001\002\000\024\004\046\011\072\023\060\041" +
    "\055\073\053\074\071\075\042\076\073\077\064\001\002" +
    "\000\006\020\uffb1\040\uffb1\001\002\000\032\004\046\011" +
    "\072\023\060\025\065\035\041\036\057\041\055\073\053" +
    "\074\071\075\042\076\073\077\064\001\002\000\006\007" +
    "\uff93\037\uff93\001\002\000\032\004\046\011\072\023\060" +
    "\025\065\035\041\036\057\041\055\073\053\074\071\075" +
    "\042\076\073\077\064\001\002\000\006\007\uff94\037\uff94" +
    "\001\002\000\012\004\155\011\072\021\152\076\073\001" +
    "\002\000\006\004\014\057\151\001\002\000\050\007\uffa8" +
    "\010\uffa8\011\uffa8\012\uffa8\013\uffa8\016\uffa8\020\uffa8\021" +
    "\uffa8\022\uffa8\024\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\032\uffa8\033\uffa8\034\uffa8\037\uffa8\040\uffa8\001\002\000" +
    "\010\004\163\011\072\076\073\001\002\000\004\024\166" +
    "\001\002\000\014\013\uffe6\014\102\015\uffe6\021\160\024" +
    "\uffe6\001\002\000\006\015\157\024\156\001\002\000\050" +
    "\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\016\uffa6\020" +
    "\uffa6\021\uffa6\022\uffa6\024\uffa6\026\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\033\uffa6\034\uffa6\037\uffa6\040\uffa6\001" +
    "\002\000\004\057\151\001\002\000\012\004\163\011\072" +
    "\024\161\076\073\001\002\000\050\007\uffa2\010\uffa2\011" +
    "\uffa2\012\uffa2\013\uffa2\016\uffa2\020\uffa2\021\uffa2\022\uffa2" +
    "\024\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033" +
    "\uffa2\034\uffa2\037\uffa2\040\uffa2\001\002\000\004\024\uffe1" +
    "\001\002\000\004\015\157\001\002\000\004\024\165\001" +
    "\002\000\050\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4" +
    "\016\uffa4\020\uffa4\021\uffa4\022\uffa4\024\uffa4\026\uffa4\027" +
    "\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\037\uffa4" +
    "\040\uffa4\001\002\000\050\007\uffa7\010\uffa7\011\uffa7\012" +
    "\uffa7\013\uffa7\016\uffa7\020\uffa7\021\uffa7\022\uffa7\024\uffa7" +
    "\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034" +
    "\uffa7\037\uffa7\040\uffa7\001\002\000\004\024\170\001\002" +
    "\000\050\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\016" +
    "\uffa3\020\uffa3\021\uffa3\022\uffa3\024\uffa3\026\uffa3\027\uffa3" +
    "\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\037\uffa3\040" +
    "\uffa3\001\002\000\004\035\201\001\002\000\004\035\173" +
    "\001\002\000\004\004\174\001\002\000\004\036\175\001" +
    "\002\000\034\004\046\011\072\023\060\025\065\035\041" +
    "\036\057\037\176\041\055\073\053\074\071\075\042\076" +
    "\073\077\064\001\002\000\010\007\uff91\020\uff91\037\uff91" +
    "\001\002\000\004\037\200\001\002\000\010\007\uff8f\020" +
    "\uff8f\037\uff8f\001\002\000\004\004\202\001\002\000\004" +
    "\036\203\001\002\000\034\004\046\011\072\023\060\025" +
    "\065\035\041\036\057\037\204\041\055\073\053\074\071" +
    "\075\042\076\073\077\064\001\002\000\010\007\uff92\020" +
    "\uff92\037\uff92\001\002\000\004\037\206\001\002\000\010" +
    "\007\uff90\020\uff90\037\uff90\001\002\000\026\004\uff78\011" +
    "\uff78\023\uff78\025\uff78\035\uff78\036\uff78\041\uff78\073\uff78" +
    "\074\uff78\076\uff78\001\002\000\026\004\uff76\011\uff76\023" +
    "\uff76\025\uff76\035\uff76\036\uff76\041\uff76\073\uff76\074\uff76" +
    "\076\uff76\001\002\000\026\004\uff7d\011\uff7d\023\uff7d\025" +
    "\uff7d\035\uff7d\036\uff7d\041\uff7d\073\uff7d\074\uff7d\076\uff7d" +
    "\001\002\000\026\004\uff7f\011\uff7f\023\uff7f\025\uff7f\035" +
    "\uff7f\036\uff7f\041\uff7f\073\uff7f\074\uff7f\076\uff7f\001\002" +
    "\000\026\004\uff77\011\uff77\023\uff77\025\uff77\035\uff77\036" +
    "\uff77\041\uff77\073\uff77\074\uff77\076\uff77\001\002\000\026" +
    "\004\uff74\011\uff74\023\uff74\025\uff74\035\uff74\036\uff74\041" +
    "\uff74\073\uff74\074\uff74\076\uff74\001\002\000\026\004\uff7e" +
    "\011\uff7e\023\uff7e\025\uff7e\035\uff7e\036\uff7e\041\uff7e\073" +
    "\uff7e\074\uff7e\076\uff7e\001\002\000\026\004\uff72\011\uff72" +
    "\023\uff72\025\uff72\035\uff72\036\uff72\041\uff72\073\uff72\074" +
    "\uff72\076\uff72\001\002\000\026\004\uff79\011\uff79\023\uff79" +
    "\025\uff79\035\uff79\036\uff79\041\uff79\073\uff79\074\uff79\076" +
    "\uff79\001\002\000\026\004\uff7b\011\uff7b\023\uff7b\025\uff7b" +
    "\035\uff7b\036\uff7b\041\uff7b\073\uff7b\074\uff7b\076\uff7b\001" +
    "\002\000\026\004\uff7a\011\uff7a\023\uff7a\025\uff7a\035\uff7a" +
    "\036\uff7a\041\uff7a\073\uff7a\074\uff7a\076\uff7a\001\002\000" +
    "\026\004\uff73\011\uff73\023\uff73\025\uff73\035\uff73\036\uff73" +
    "\041\uff73\073\uff73\074\uff73\076\uff73\001\002\000\026\004" +
    "\uff7c\011\uff7c\023\uff7c\025\uff7c\035\uff7c\036\uff7c\041\uff7c" +
    "\073\uff7c\074\uff7c\076\uff7c\001\002\000\026\004\046\011" +
    "\072\023\060\025\065\035\041\036\057\041\055\073\053" +
    "\074\071\076\073\001\002\000\026\004\uff81\011\uff81\023" +
    "\uff81\025\uff81\035\uff81\036\uff81\041\uff81\073\uff81\074\uff81" +
    "\076\uff81\001\002\000\026\004\046\011\072\023\060\025" +
    "\065\035\041\036\057\041\055\073\053\074\071\076\073" +
    "\001\002\000\026\004\uff80\011\uff80\023\uff80\025\uff80\035" +
    "\uff80\036\uff80\041\uff80\073\uff80\074\uff80\076\uff80\001\002" +
    "\000\026\004\uff75\011\uff75\023\uff75\025\uff75\035\uff75\036" +
    "\uff75\041\uff75\073\uff75\074\uff75\076\uff75\001\002\000\042" +
    "\007\uff89\010\211\011\223\012\220\013\221\016\215\020" +
    "\uff89\022\226\026\207\027\213\030\210\031\225\032\227" +
    "\033\217\034\212\037\uff89\001\002\000\010\007\uff88\020" +
    "\uff88\037\uff88\001\002\000\042\007\uff8e\010\211\011\223" +
    "\012\220\013\221\016\215\020\uff8e\022\226\026\207\027" +
    "\213\030\210\031\225\032\227\033\217\034\212\037\uff8e" +
    "\001\002\000\010\007\uff8d\020\uff8d\037\uff8d\001\002\000" +
    "\024\004\034\054\023\055\027\056\236\066\033\067\031" +
    "\070\022\071\025\072\030\001\002\000\004\017\241\001" +
    "\002\000\004\017\240\001\002\000\014\006\uffb0\007\uffb0" +
    "\017\uffb0\020\uffb0\037\uffb0\001\002\000\014\006\uffaf\007" +
    "\uffaf\017\uffaf\020\uffaf\037\uffaf\001\002\000\024\004\034" +
    "\054\023\055\027\056\243\066\033\067\031\070\022\071" +
    "\025\072\030\001\002\000\004\020\252\001\002\000\004" +
    "\020\245\001\002\000\024\004\034\054\023\055\027\056" +
    "\246\066\033\067\031\070\022\071\025\072\030\001\002" +
    "\000\004\017\251\001\002\000\004\017\250\001\002\000" +
    "\014\006\uffb9\007\uffb9\017\uffb9\020\uffb9\037\uffb9\001\002" +
    "\000\014\006\uffb7\007\uffb7\017\uffb7\020\uffb7\037\uffb7\001" +
    "\002\000\024\004\034\054\023\055\027\056\253\066\033" +
    "\067\031\070\022\071\025\072\030\001\002\000\004\017" +
    "\256\001\002\000\004\017\255\001\002\000\014\006\uffb8" +
    "\007\uffb8\017\uffb8\020\uffb8\037\uffb8\001\002\000\014\006" +
    "\uffb6\007\uffb6\017\uffb6\020\uffb6\037\uffb6\001\002\000\004" +
    "\036\260\001\002\000\004\004\261\001\002\000\004\021" +
    "\357\001\002\000\004\037\266\001\002\000\006\020\264" +
    "\037\uff9c\001\002\000\004\004\261\001\002\000\004\037" +
    "\uff9b\001\002\000\004\041\267\001\002\000\042\004\046" +
    "\011\072\023\060\025\065\035\041\036\057\041\055\043" +
    "\277\045\300\051\304\053\311\064\305\065\302\073\053" +
    "\074\071\076\073\001\002\000\052\004\uff60\011\uff60\023" +
    "\uff60\025\uff60\035\uff60\036\uff60\040\uff60\041\uff60\043\uff60" +
    "\044\uff60\045\uff60\047\uff60\050\uff60\051\uff60\053\uff60\064" +
    "\uff60\065\uff60\073\uff60\074\uff60\076\uff60\001\002\000\052" +
    "\004\uff5c\011\uff5c\023\uff5c\025\uff5c\035\uff5c\036\uff5c\040" +
    "\uff5c\041\uff5c\043\uff5c\044\uff5c\045\uff5c\047\uff5c\050\uff5c" +
    "\051\uff5c\053\uff5c\064\uff5c\065\uff5c\073\uff5c\074\uff5c\076" +
    "\uff5c\001\002\000\044\004\046\011\072\023\060\025\065" +
    "\035\041\036\057\040\352\041\055\043\277\045\300\051" +
    "\304\053\311\064\305\065\302\073\053\074\071\076\073" +
    "\001\002\000\052\004\uff61\011\uff61\023\uff61\025\uff61\035" +
    "\uff61\036\uff61\040\uff61\041\uff61\043\uff61\044\uff61\045\uff61" +
    "\047\uff61\050\uff61\051\uff61\053\uff61\064\uff61\065\uff61\073" +
    "\uff61\074\uff61\076\uff61\001\002\000\052\004\uff5a\011\uff5a" +
    "\023\uff5a\025\uff5a\035\uff5a\036\uff5a\040\uff5a\041\uff5a\043" +
    "\uff5a\044\uff5a\045\uff5a\047\uff5a\050\uff5a\051\uff5a\053\uff5a" +
    "\064\uff5a\065\uff5a\073\uff5a\074\uff5a\076\uff5a\001\002\000" +
    "\052\004\uff5f\011\uff5f\023\uff5f\025\uff5f\035\uff5f\036\uff5f" +
    "\040\uff5f\041\uff5f\043\uff5f\044\uff5f\045\uff5f\047\uff5f\050" +
    "\uff5f\051\uff5f\053\uff5f\064\uff5f\065\uff5f\073\uff5f\074\uff5f" +
    "\076\uff5f\001\002\000\052\004\uff5e\011\uff5e\023\uff5e\025" +
    "\uff5e\035\uff5e\036\uff5e\040\uff5e\041\uff5e\043\uff5e\044\uff5e" +
    "\045\uff5e\047\uff5e\050\uff5e\051\uff5e\053\uff5e\064\uff5e\065" +
    "\uff5e\073\uff5e\074\uff5e\076\uff5e\001\002\000\042\004\046" +
    "\011\072\023\060\025\065\035\041\036\057\041\055\043" +
    "\277\045\300\051\304\053\311\064\305\065\302\073\053" +
    "\074\071\076\073\001\002\000\004\036\336\001\002\000" +
    "\052\004\uff58\011\uff58\023\uff58\025\uff58\035\uff58\036\uff58" +
    "\040\uff58\041\uff58\043\uff58\044\uff58\045\uff58\047\uff58\050" +
    "\uff58\051\uff58\053\uff58\064\uff58\065\uff58\073\uff58\074\uff58" +
    "\076\uff58\001\002\000\034\004\046\007\333\011\072\023" +
    "\060\025\065\035\041\036\057\041\055\073\053\074\071" +
    "\075\042\076\073\077\064\001\002\000\052\004\uff5b\011" +
    "\uff5b\023\uff5b\025\uff5b\035\uff5b\036\uff5b\040\uff5b\041\uff5b" +
    "\043\uff5b\044\uff5b\045\uff5b\047\uff5b\050\uff5b\051\uff5b\053" +
    "\uff5b\064\uff5b\065\uff5b\073\uff5b\074\uff5b\076\uff5b\001\002" +
    "\000\026\004\046\007\327\011\072\023\060\041\055\073" +
    "\053\074\071\075\042\076\073\077\064\001\002\000\004" +
    "\004\014\001\002\000\040\006\317\010\uff83\011\uff83\012" +
    "\uff83\013\uff83\016\uff83\021\021\022\uff83\026\uff83\027\uff83" +
    "\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\001\002\000" +
    "\052\004\uff5d\011\uff5d\023\uff5d\025\uff5d\035\uff5d\036\uff5d" +
    "\040\uff5d\041\uff5d\043\uff5d\044\uff5d\045\uff5d\047\uff5d\050" +
    "\uff5d\051\uff5d\053\uff5d\064\uff5d\065\uff5d\073\uff5d\074\uff5d" +
    "\076\uff5d\001\002\000\004\007\316\001\002\000\032\004" +
    "\046\011\072\023\060\025\065\035\041\036\057\041\055" +
    "\073\053\074\071\075\042\076\073\077\064\001\002\000" +
    "\004\007\315\001\002\000\004\007\314\001\002\000\052" +
    "\004\uff6c\011\uff6c\023\uff6c\025\uff6c\035\uff6c\036\uff6c\040" +
    "\uff6c\041\uff6c\043\uff6c\044\uff6c\045\uff6c\047\uff6c\050\uff6c" +
    "\051\uff6c\053\uff6c\064\uff6c\065\uff6c\073\uff6c\074\uff6c\076" +
    "\uff6c\001\002\000\052\004\uff6d\011\uff6d\023\uff6d\025\uff6d" +
    "\035\uff6d\036\uff6d\040\uff6d\041\uff6d\043\uff6d\044\uff6d\045" +
    "\uff6d\047\uff6d\050\uff6d\051\uff6d\053\uff6d\064\uff6d\065\uff6d" +
    "\073\uff6d\074\uff6d\076\uff6d\001\002\000\052\004\uff62\011" +
    "\uff62\023\uff62\025\uff62\035\uff62\036\uff62\040\uff62\041\uff62" +
    "\043\uff62\044\uff62\045\uff62\047\uff62\050\uff62\051\uff62\053" +
    "\uff62\064\uff62\065\uff62\073\uff62\074\uff62\076\uff62\001\002" +
    "\000\032\004\046\011\072\023\060\025\065\035\041\036" +
    "\057\041\055\073\053\074\071\075\042\076\073\077\064" +
    "\001\002\000\004\007\323\001\002\000\004\007\322\001" +
    "\002\000\052\004\uff70\011\uff70\023\uff70\025\uff70\035\uff70" +
    "\036\uff70\040\uff70\041\uff70\043\uff70\044\uff70\045\uff70\047" +
    "\uff70\050\uff70\051\uff70\053\uff70\064\uff70\065\uff70\073\uff70" +
    "\074\uff70\076\uff70\001\002\000\052\004\uff71\011\uff71\023" +
    "\uff71\025\uff71\035\uff71\036\uff71\040\uff71\041\uff71\043\uff71" +
    "\044\uff71\045\uff71\047\uff71\050\uff71\051\uff71\053\uff71\064" +
    "\uff71\065\uff71\073\uff71\074\uff71\076\uff71\001\002\000\004" +
    "\007\325\001\002\000\052\004\uff6e\011\uff6e\023\uff6e\025" +
    "\uff6e\035\uff6e\036\uff6e\040\uff6e\041\uff6e\043\uff6e\044\uff6e" +
    "\045\uff6e\047\uff6e\050\uff6e\051\uff6e\053\uff6e\064\uff6e\065" +
    "\uff6e\073\uff6e\074\uff6e\076\uff6e\001\002\000\004\007\330" +
    "\001\002\000\052\004\uff67\011\uff67\023\uff67\025\uff67\035" +
    "\uff67\036\uff67\040\uff67\041\uff67\043\uff67\044\uff67\045\uff67" +
    "\047\uff67\050\uff67\051\uff67\053\uff67\064\uff67\065\uff67\073" +
    "\uff67\074\uff67\076\uff67\001\002\000\052\004\uff66\011\uff66" +
    "\023\uff66\025\uff66\035\uff66\036\uff66\040\uff66\041\uff66\043" +
    "\uff66\044\uff66\045\uff66\047\uff66\050\uff66\051\uff66\053\uff66" +
    "\064\uff66\065\uff66\073\uff66\074\uff66\076\uff66\001\002\000" +
    "\004\007\335\001\002\000\004\007\334\001\002\000\052" +
    "\004\uff69\011\uff69\023\uff69\025\uff69\035\uff69\036\uff69\040" +
    "\uff69\041\uff69\043\uff69\044\uff69\045\uff69\047\uff69\050\uff69" +
    "\051\uff69\053\uff69\064\uff69\065\uff69\073\uff69\074\uff69\076" +
    "\uff69\001\002\000\052\004\uff6a\011\uff6a\023\uff6a\025\uff6a" +
    "\035\uff6a\036\uff6a\040\uff6a\041\uff6a\043\uff6a\044\uff6a\045" +
    "\uff6a\047\uff6a\050\uff6a\051\uff6a\053\uff6a\064\uff6a\065\uff6a" +
    "\073\uff6a\074\uff6a\076\uff6a\001\002\000\052\004\uff6b\011" +
    "\uff6b\023\uff6b\025\uff6b\035\uff6b\036\uff6b\040\uff6b\041\uff6b" +
    "\043\uff6b\044\uff6b\045\uff6b\047\uff6b\050\uff6b\051\uff6b\053" +
    "\uff6b\064\uff6b\065\uff6b\073\uff6b\074\uff6b\076\uff6b\001\002" +
    "\000\026\004\046\011\072\023\060\025\065\035\041\036" +
    "\057\041\055\073\053\074\071\076\073\001\002\000\004" +
    "\037\340\001\002\000\004\046\341\001\002\000\042\004" +
    "\046\011\072\023\060\025\065\035\041\036\057\041\055" +
    "\043\277\045\300\051\304\053\311\064\305\065\302\073" +
    "\053\074\071\076\073\001\002\000\046\004\046\011\072" +
    "\023\060\025\065\035\041\036\057\041\055\043\277\045" +
    "\300\047\345\050\343\051\304\053\311\064\305\065\302" +
    "\073\053\074\071\076\073\001\002\000\052\004\uff65\011" +
    "\uff65\023\uff65\025\uff65\035\uff65\036\uff65\040\uff65\041\uff65" +
    "\043\uff65\044\uff65\045\uff65\047\uff65\050\uff65\051\uff65\053" +
    "\uff65\064\uff65\065\uff65\073\uff65\074\uff65\076\uff65\001\002" +
    "\000\052\004\uff59\011\uff59\023\uff59\025\uff59\035\uff59\036" +
    "\uff59\040\uff59\041\uff59\043\uff59\044\uff59\045\uff59\047\uff59" +
    "\050\uff59\051\uff59\053\uff59\064\uff59\065\uff59\073\uff59\074" +
    "\uff59\076\uff59\001\002\000\042\004\046\011\072\023\060" +
    "\025\065\035\041\036\057\041\055\043\277\045\300\051" +
    "\304\053\311\064\305\065\302\073\053\074\071\076\073" +
    "\001\002\000\044\004\046\011\072\023\060\025\065\035" +
    "\041\036\057\041\055\043\277\045\300\050\347\051\304" +
    "\053\311\064\305\065\302\073\053\074\071\076\073\001" +
    "\002\000\052\004\uff64\011\uff64\023\uff64\025\uff64\035\uff64" +
    "\036\uff64\040\uff64\041\uff64\043\uff64\044\uff64\045\uff64\047" +
    "\uff64\050\uff64\051\uff64\053\uff64\064\uff64\065\uff64\073\uff64" +
    "\074\uff64\076\uff64\001\002\000\044\004\046\011\072\023" +
    "\060\025\065\035\041\036\057\041\055\043\277\044\351" +
    "\045\300\051\304\053\311\064\305\065\302\073\053\074" +
    "\071\076\073\001\002\000\052\004\uff68\011\uff68\023\uff68" +
    "\025\uff68\035\uff68\036\uff68\040\uff68\041\uff68\043\uff68\044" +
    "\uff68\045\uff68\047\uff68\050\uff68\051\uff68\053\uff68\064\uff68" +
    "\065\uff68\073\uff68\074\uff68\076\uff68\001\002\000\006\007" +
    "\353\021\354\001\002\000\012\002\uff98\004\uff98\052\uff98" +
    "\062\uff98\001\002\000\022\004\034\054\023\055\027\066" +
    "\033\067\031\070\022\071\025\072\030\001\002\000\004" +
    "\007\356\001\002\000\012\002\uff97\004\uff97\052\uff97\062" +
    "\uff97\001\002\000\022\004\034\054\023\055\027\066\033" +
    "\067\031\070\022\071\025\072\030\001\002\000\006\020" +
    "\uff9d\037\uff9d\001\002\000\010\002\ufffe\004\014\062\011" +
    "\001\002\000\004\002\ufffd\001\002\000\004\002\000\001" +
    "\002\000\042\004\046\011\072\023\060\025\065\035\041" +
    "\036\057\041\055\043\277\045\300\051\304\053\311\064" +
    "\305\065\302\073\053\074\071\076\073\001\002\000\044" +
    "\004\046\011\072\023\060\025\065\035\041\036\057\040" +
    "\366\041\055\043\277\045\300\051\304\053\311\064\305" +
    "\065\302\073\053\074\071\076\073\001\002\000\004\007" +
    "\367\001\002\000\010\002\uff63\004\uff63\062\uff63\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\020\045\012\053\011\064\006\074\003\075" +
    "\004\076\007\077\014\001\001\000\002\001\001\000\014" +
    "\045\012\053\011\074\003\076\367\077\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\075\360\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\045\012\053\011\074\003\076\015" +
    "\077\014\001\001\000\002\001\001\000\004\045\017\001" +
    "\001\000\002\001\001\000\010\002\023\003\025\043\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\004\074\005\066" +
    "\006\055\007\075\010\050\011\067\012\043\013\035\016" +
    "\042\017\061\020\044\027\062\031\051\032\065\042\036" +
    "\044\047\045\046\050\073\054\060\055\053\056\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\057\227" +
    "\060\213\061\221\062\215\063\223\001\001\000\010\011" +
    "\170\017\123\045\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\004\074\005\066\006\055\007\124\010\120\011\067" +
    "\012\043\013\035\016\115\017\123\020\044\024\134\025" +
    "\133\027\062\031\121\032\065\042\036\044\132\045\116" +
    "\001\001\000\002\001\001\000\044\004\074\005\066\006" +
    "\055\007\114\010\110\012\043\016\106\017\113\020\044" +
    "\027\062\031\111\032\065\042\036\045\107\054\060\055" +
    "\130\056\037\001\001\000\046\004\074\005\066\006\055" +
    "\007\124\010\120\011\067\012\043\013\035\016\115\017" +
    "\123\020\044\026\122\027\062\031\121\032\065\042\036" +
    "\044\117\045\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\004\074" +
    "\005\066\006\055\007\114\010\110\012\043\016\106\017" +
    "\113\020\044\027\062\031\111\032\065\042\036\045\107" +
    "\054\060\055\112\056\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\103\042\036" +
    "\001\001\000\004\042\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\004\074\005\066\006\055" +
    "\007\124\010\120\011\067\012\043\013\035\016\115\017" +
    "\123\020\044\026\127\027\062\031\121\032\065\042\036" +
    "\044\117\045\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\004\074\005\066\006\055\007" +
    "\124\010\120\011\067\012\043\013\035\016\115\017\123" +
    "\020\044\024\134\025\136\027\062\031\121\032\065\042" +
    "\036\044\132\045\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\004\074\005\066\006\055\007\124\010" +
    "\120\011\067\012\043\013\035\016\115\017\123\020\044" +
    "\027\062\031\121\032\065\042\036\044\141\045\116\001" +
    "\001\000\002\001\001\000\054\004\074\005\066\006\055" +
    "\007\075\010\050\011\067\012\043\013\035\016\042\017" +
    "\061\020\044\027\062\031\051\032\065\042\036\044\047" +
    "\045\046\050\143\054\060\055\053\056\037\001\001\000" +
    "\002\001\001\000\054\004\074\005\066\006\055\007\075" +
    "\010\050\011\067\012\043\013\035\016\042\017\061\020" +
    "\044\027\062\031\051\032\065\042\036\044\047\045\046" +
    "\050\145\054\060\055\053\056\037\001\001\000\002\001" +
    "\001\000\022\004\074\005\066\006\055\012\043\013\152" +
    "\016\115\027\062\042\153\001\001\000\004\045\017\001" +
    "\001\000\002\001\001\000\012\004\161\012\166\027\062" +
    "\042\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\161\012\163\027\062\042\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\004\074\005\066\006" +
    "\055\007\075\010\050\011\067\012\043\013\035\016\042" +
    "\017\061\020\044\027\062\031\051\032\065\042\036\044" +
    "\047\045\046\050\176\054\060\055\053\056\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\004\074\005\066" +
    "\006\055\007\075\010\050\011\067\012\043\013\035\016" +
    "\042\017\061\020\044\027\062\031\051\032\065\042\036" +
    "\044\047\045\046\050\204\054\060\055\053\056\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\074\005\066\006\055\007\114\010\110\012" +
    "\043\016\106\017\113\020\044\027\062\031\111\032\065" +
    "\042\036\045\107\054\060\055\233\056\232\001\001\000" +
    "\002\001\001\000\044\004\074\005\066\006\055\007\114" +
    "\010\110\012\043\016\106\017\113\020\044\027\062\031" +
    "\111\032\065\042\036\045\107\054\060\055\231\056\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\057" +
    "\227\060\213\061\221\062\215\063\223\001\001\000\002" +
    "\001\001\000\014\057\227\060\213\061\221\062\215\063" +
    "\223\001\001\000\002\001\001\000\010\002\023\003\025" +
    "\043\236\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\023\003\025" +
    "\043\243\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\023\003\025\043\246\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\023\003\025\043\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\046\262\047\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\046" +
    "\262\047\264\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\004\074\005\066\006\055\007\114\010\110\012" +
    "\043\016\106\017\113\020\044\027\062\031\111\032\065" +
    "\033\271\034\300\042\036\045\305\054\060\055\307\056" +
    "\037\065\267\066\274\067\275\070\306\071\270\072\302" +
    "\073\273\074\272\001\001\000\002\001\001\000\002\001" +
    "\001\000\066\004\074\005\066\006\055\007\114\010\110" +
    "\012\043\016\106\017\113\020\044\027\062\031\111\032" +
    "\065\034\343\042\036\045\305\054\060\055\307\056\037" +
    "\065\267\066\274\067\275\070\306\071\270\072\302\073" +
    "\273\074\272\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\004\074\005" +
    "\066\006\055\007\114\010\110\012\043\016\106\017\113" +
    "\020\044\027\062\031\111\032\065\033\347\034\300\042" +
    "\036\045\305\054\060\055\307\056\037\065\267\066\274" +
    "\067\275\070\306\071\270\072\302\073\273\074\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\004\074" +
    "\005\066\006\055\007\075\010\050\011\067\012\043\013" +
    "\035\016\042\017\061\020\044\027\062\031\051\032\065" +
    "\042\036\044\330\045\046\054\060\055\331\056\037\001" +
    "\001\000\002\001\001\000\044\004\074\005\066\006\055" +
    "\007\124\010\120\011\067\012\043\013\035\016\115\017" +
    "\123\020\044\027\062\031\121\032\065\042\036\044\325" +
    "\045\116\001\001\000\004\045\323\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\004\074" +
    "\005\066\006\055\007\075\010\050\011\067\012\043\013" +
    "\035\016\042\017\061\020\044\027\062\031\051\032\065" +
    "\042\036\044\311\045\046\054\060\055\312\056\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\004\074\005" +
    "\066\006\055\007\075\010\050\011\067\012\043\013\035" +
    "\016\042\017\061\020\044\027\062\031\051\032\065\042" +
    "\036\044\317\045\046\054\060\055\320\056\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\004\074\005\066\006\055\007" +
    "\114\010\110\012\043\016\106\017\113\020\044\027\062" +
    "\031\111\032\065\042\036\045\107\054\060\055\336\056" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\070" +
    "\004\074\005\066\006\055\007\114\010\110\012\043\016" +
    "\106\017\113\020\044\027\062\031\111\032\065\033\341" +
    "\034\300\042\036\045\305\054\060\055\307\056\037\065" +
    "\267\066\274\067\275\070\306\071\270\072\302\073\273" +
    "\074\272\001\001\000\066\004\074\005\066\006\055\007" +
    "\114\010\110\012\043\016\106\017\113\020\044\027\062" +
    "\031\111\032\065\034\343\042\036\045\305\054\060\055" +
    "\307\056\037\065\267\066\274\067\275\070\306\071\270" +
    "\072\302\073\273\074\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\004\074\005\066\006\055\007\114" +
    "\010\110\012\043\016\106\017\113\020\044\027\062\031" +
    "\111\032\065\033\345\034\300\042\036\045\305\054\060" +
    "\055\307\056\037\065\267\066\274\067\275\070\306\071" +
    "\270\072\302\073\273\074\272\001\001\000\066\004\074" +
    "\005\066\006\055\007\114\010\110\012\043\016\106\017" +
    "\113\020\044\027\062\031\111\032\065\034\343\042\036" +
    "\045\305\054\060\055\307\056\037\065\267\066\274\067" +
    "\275\070\306\071\270\072\302\073\273\074\272\001\001" +
    "\000\002\001\001\000\066\004\074\005\066\006\055\007" +
    "\114\010\110\012\043\016\106\017\113\020\044\027\062" +
    "\031\111\032\065\034\343\042\036\045\305\054\060\055" +
    "\307\056\037\065\267\066\274\067\275\070\306\071\270" +
    "\072\302\073\273\074\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\023\003\025" +
    "\043\354\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\023\003\025\043\357\001\001\000\002\001\001" +
    "\000\014\045\012\053\011\074\003\076\361\077\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\070\004\074" +
    "\005\066\006\055\007\114\010\110\012\043\016\106\017" +
    "\113\020\044\027\062\031\111\032\065\033\364\034\300" +
    "\042\036\045\305\054\060\055\307\056\037\065\267\066" +
    "\274\067\275\070\306\071\270\072\302\073\273\074\272" +
    "\001\001\000\066\004\074\005\066\006\055\007\114\010" +
    "\110\012\043\016\106\017\113\020\044\027\062\031\111" +
    "\032\065\034\343\042\036\045\305\054\060\055\307\056" +
    "\037\065\267\066\274\067\275\070\306\071\270\072\302" +
    "\073\273\074\272\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }



      public boolean syntaxErrors;
      public void syntax_error(Symbol current_token) {  
          report_error(
              "Syntax error at line " + (current_token.left+1) + ", column "
      + current_token.right, null
          );
      }

  private boolean debug = false;
  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}

  static class Node {
    public ArrayList<Node> children;
    private static int globalCounter = 0;

    public int counter;
    private Object value;

    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }

    public void addChild(Node n){ children.add(n); }

    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }
  }

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // global_code ::= main_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_code",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= global_code EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // global_code ::= main_statement not_main_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_code",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // global_code ::= not_main_statements main_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_code",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // global_code ::= not_main_statements main_statement not_main_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_code",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // not_main_statements ::= not_main_statement not_main_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_main_statements",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // not_main_statements ::= not_main_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_main_statements",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // not_main_statement ::= func_definition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_main_statement",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // not_main_statement ::= var_init 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_main_statement",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // let_bind ::= LET IDENTIFIER EQUAL full_exp 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
               Node n = new Node("LET");
               n.addChild(new Node(i));
               n.addChild((Node)e);
               RESULT = n;
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("let_bind",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bool_duo ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_duo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bool_duo ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_duo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bool_ops ::= EXCLAM bool_duo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bool_ops ::= bool_duo AND bool_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bool_ops ::= bool_duo OR bool_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bool_ops ::= bool_duo IMPL bool_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bool_ops ::= bool_duo EQ bool_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bool_ops ::= bool_duo DIFF bool_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bool_ops_plus ::= bool_duo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops_plus",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bool_ops_plus ::= bool_duo AND bool_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops_plus",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bool_ops_plus ::= bool_duo OR bool_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops_plus",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bool_ops_plus ::= bool_duo IMPL bool_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops_plus",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bool_ops_plus ::= bool_duo EQ bool_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops_plus",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bool_ops_plus ::= bool_duo DIFF bool_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops_plus",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bool_val ::= bool_duo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_val",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // number ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // number ::= number UNDERSCORE INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // int_val ::= number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_val",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // int_val ::= MINUS number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_val",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // rat_val ::= int_val DIV int_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rat_val",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // float_val ::= int_val DOT number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("float_val",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // int_number ::= len_property 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_number",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // int_number ::= int_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_number",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // numeric_regrouped ::= int_number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_regrouped",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // numeric_regrouped ::= rat_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_regrouped",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // numeric_regrouped ::= float_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_regrouped",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // numeric_ops_plus ::= numeric_regrouped 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops_plus",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // numeric_ops_plus ::= numeric_regrouped PLUS numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops_plus",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // numeric_ops_plus ::= numeric_regrouped MINUS numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops_plus",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // numeric_ops_plus ::= numeric_regrouped MULT numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops_plus",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // numeric_ops_plus ::= numeric_regrouped DIV numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops_plus",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // numeric_ops_plus ::= numeric_regrouped EXPO numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops_plus",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // numeric_ops_plus ::= numeric_regrouped EQ numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops_plus",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // numeric_ops_plus ::= numeric_regrouped DIFF numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops_plus",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // numeric_ops_plus ::= numeric_regrouped LCROCHET numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops_plus",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // numeric_ops_plus ::= numeric_regrouped INFEQ numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops_plus",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // numeric_ops ::= numeric_regrouped PLUS numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // numeric_ops ::= numeric_regrouped MINUS numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // numeric_ops ::= numeric_regrouped MULT numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // numeric_ops ::= numeric_regrouped DIV numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // numeric_ops ::= numeric_regrouped EXPO numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // numeric_ops ::= numeric_regrouped EQ numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // numeric_ops ::= numeric_regrouped DIFF numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // numeric_ops ::= numeric_regrouped LCROCHET numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // numeric_ops ::= numeric_regrouped INFEQ numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // numeric_val ::= numeric_regrouped 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_val",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // all_types ::= TYPE_BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // all_types ::= TYPE_CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // all_types ::= TYPE_INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // all_types ::= TYPE_FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // all_types ::= TYPE_RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // all_types ::= type_seq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // all_types ::= type_dict 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // all_types ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // all_types_val ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // all_types_val ::= bool_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // all_types_val ::= numeric_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // all_types_val ::= dict_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // all_types_val ::= seq_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // all_types_val ::= index 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // all_types_val ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // all_types_val ::= identifiers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // type_dict ::= DICT LCROCHET all_types COMMA all_types RCROCHET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dict",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // type_dict ::= DICT LCROCHET TOP COMMA all_types RCROCHET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dict",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // type_dict ::= DICT LCROCHET all_types COMMA TOP RCROCHET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dict",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // type_dict ::= DICT LCROCHET TOP COMMA TOP RCROCHET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dict",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // dict_val ::= LBRA dict_content RBRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_val",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // dict_content ::= dict_obj 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_content",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // dict_content ::= dict_obj COMMA dict_content 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_content",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // dict_content ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_content",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // dict_obj ::= all_types_val COLON all_types_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_obj",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // type_seq ::= SEQ LCROCHET all_types RCROCHET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_seq",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type_seq ::= SEQ LCROCHET TOP RCROCHET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_seq",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // seq_temp ::= LAGRA seq_content RAGRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_temp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // seq_temp ::= slice 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_temp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // seq_val ::= seq_temp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_val",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // seq_content ::= all_types_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_content",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // seq_content ::= all_types_val COMMA seq_content 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_content",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // seq_content ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_content",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // len_property ::= IDENTIFIER DOT LEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("len_property",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // index ::= IDENTIFIER LAGRA numeric_val RAGRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // index ::= IDENTIFIER LAGRA IDENTIFIER RAGRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // in_property ::= all_types_val IN all_types_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in_property",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // slice ::= IDENTIFIER LAGRA number COLON int_number RAGRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // slice ::= IDENTIFIER LAGRA COLON int_number RAGRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // slice ::= IDENTIFIER LAGRA number COLON RAGRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // seq_concat ::= seq_temp DOUBLE_COLON seq_temp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_concat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // seq_concat ::= identifiers DOUBLE_COLON seq_temp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_concat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // identifiers ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifiers",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // identifiers ::= IDENTIFIER DOT identifiers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifiers",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // declaration ::= IDENTIFIER COLON all_types 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // declaration_list ::= declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // declaration_list ::= declaration COMMA declaration_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // type_definition ::= TDEF IDENTIFIER LBRA declaration_list RBRA SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // alias_definition ::= ALIAS all_types all_types SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias_definition",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // func_definition ::= FDEF IDENTIFIER LPAREN declaration_list RPAREN LBRA statements RBRA SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_definition",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // func_definition ::= FDEF IDENTIFIER LPAREN declaration_list RPAREN LBRA statements RBRA COLON all_types SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_definition",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // parameters_list ::= all_types_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parameters_list ::= exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // parameters_list ::= all_types_val COMMA parameters_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // parameters_list ::= exp COMMA parameters_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // func_call ::= QUESTION bool_val QUESTION IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // func_call ::= QUESTION identifiers QUESTION IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // func_call ::= QUESTION bool_val QUESTION IDENTIFIER LPAREN parameters_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // func_call ::= QUESTION identifiers QUESTION IDENTIFIER LPAREN parameters_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // exp ::= exp_content binary_operators exp_content 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // exp ::= exp_content binary_operators exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // exp ::= EXCLAM exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // exp ::= LPAREN exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // exp ::= func_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // exp ::= exp_content DOUBLE_COLON exp_content 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // exp ::= exp_content DOUBLE_COLON exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // exp_content ::= numeric_regrouped 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_content",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // exp_content ::= bool_duo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_content",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // exp_content ::= seq_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_content",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // exp_content ::= dict_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_content",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // exp_content ::= identifiers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_content",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // exp_content ::= index 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_content",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // comparison_operators_num_bool ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators_num_bool",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // comparison_operators_num_bool ::= DIFF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators_num_bool",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // comparison_operators_num ::= INFEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators_num",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // comparison_operators_num ::= LCROCHET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators_num",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // numeric_operators ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_operators",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // numeric_operators ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_operators",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // numeric_operators ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_operators",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // numeric_operators ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_operators",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // numeric_operators ::= EXPO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_operators",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // boolean_operators ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // boolean_operators ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // boolean_operators ::= IMPL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // binary_operators ::= comparison_operators_num_bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operators",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // binary_operators ::= comparison_operators_num 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operators",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // binary_operators ::= numeric_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operators",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // binary_operators ::= boolean_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operators",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // var_assigment ::= identifiers EQUAL all_types_val SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_assigment",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // var_assigment ::= identifiers EQUAL exp SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_assigment",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // var_init ::= identifiers COLON all_types EQUAL parameters_list SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_init",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // read_var ::= READ identifiers SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_var",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // print_var ::= PRINT all_types_val SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_var",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // print_var ::= PRINT exp SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_var",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // return ::= RETURN all_types_val SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // return ::= RETURN exp SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // return ::= RETURN SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // loop ::= LOOP statements POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // break ::= BREAK SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // break ::= BREAK all_types_val SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // if_statement ::= IF LPAREN exp RPAREN THEN statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // if_statement ::= IF LPAREN exp RPAREN THEN statements ELSE statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // main_statement ::= MAIN LBRA statements RBRA SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_statement",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // statement ::= exp SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // statement ::= var_init 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // statement ::= var_assigment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // statement ::= read_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // statement ::= print_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // statement ::= return 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // statement ::= loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // statement ::= break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
