
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\234\000\002\064\003\000\002\002\004\000\002\064" +
    "\004\000\002\064\004\000\002\064\005\000\002\076\004" +
    "\000\002\076\003\000\002\077\003\000\002\077\003\000" +
    "\002\036\006\000\002\017\003\000\002\017\003\000\002" +
    "\022\004\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\023\003" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\011\003\000\002" +
    "\042\003\000\002\042\005\000\002\004\003\000\002\004" +
    "\004\000\002\005\005\000\002\006\005\000\002\012\003" +
    "\000\002\012\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\013\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\002\010\000\002\002" +
    "\010\000\002\002\010\000\002\002\010\000\002\007\005" +
    "\000\002\025\003\000\002\025\005\000\002\025\002\000" +
    "\002\024\005\000\002\003\006\000\002\003\006\000\002" +
    "\020\005\000\002\020\003\000\002\010\003\000\002\026" +
    "\003\000\002\026\005\000\002\026\002\000\002\027\005" +
    "\000\002\031\006\000\002\031\006\000\002\030\005\000" +
    "\002\032\010\000\002\032\007\000\002\032\007\000\002" +
    "\021\005\000\002\021\005\000\002\045\003\000\002\045" +
    "\005\000\002\046\005\000\002\047\003\000\002\047\005" +
    "\000\002\051\010\000\002\052\006\000\002\053\013\000" +
    "\002\053\015\000\002\050\003\000\002\050\003\000\002" +
    "\050\005\000\002\050\005\000\002\050\002\000\002\054" +
    "\011\000\002\054\011\000\002\055\005\000\002\055\005" +
    "\000\002\055\005\000\002\055\003\000\002\055\004\000" +
    "\002\055\005\000\002\055\005\000\002\055\005\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\057\003" +
    "\000\002\057\003\000\002\060\003\000\002\060\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\065\006\000" +
    "\002\065\006\000\002\074\010\000\002\074\006\000\002" +
    "\066\005\000\002\067\005\000\002\067\005\000\002\070" +
    "\005\000\002\070\005\000\002\070\004\000\002\071\005" +
    "\000\002\072\004\000\002\072\005\000\002\073\011\000" +
    "\002\073\013\000\002\073\013\000\002\073\011\000\002" +
    "\075\007\000\002\034\004\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\033\004\000\002" +
    "\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010b\000\010\004\014\052\005\062\011\001\002\000" +
    "\012\002\ufff9\004\ufff9\052\ufff9\062\ufff9\001\002\000\004" +
    "\041\u010a\001\002\000\010\002\001\004\014\062\011\001" +
    "\002\000\004\002\u0108\001\002\000\004\052\005\001\002" +
    "\000\004\004\260\001\002\000\012\002\ufffa\004\ufffa\052" +
    "\ufffa\062\ufffa\001\002\000\004\021\021\001\002\000\102" +
    "\004\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013" +
    "\uffb2\015\017\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2" +
    "\024\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\037\uffb2\040\uffb2\041\uffb2\054\uffb2" +
    "\055\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\001" +
    "\002\000\012\002\ufffb\004\014\052\ufffb\062\011\001\002" +
    "\000\006\002\ufffc\052\ufffc\001\002\000\004\004\014\001" +
    "\002\000\100\004\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1" +
    "\012\uffb1\013\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\024\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\033\uffb1\034\uffb1\035\uffb1\037\uffb1\040\uffb1\041\uffb1\054" +
    "\uffb1\055\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1" +
    "\001\002\000\022\004\014\054\023\055\027\066\034\067" +
    "\031\070\022\071\025\072\030\001\002\000\036\004\uffda" +
    "\006\uffda\007\uffda\017\uffda\020\uffda\037\uffda\040\uffda\054" +
    "\uffda\055\uffda\066\uffda\067\uffda\070\uffda\071\uffda\072\uffda" +
    "\001\002\000\004\016\243\001\002\000\036\004\uffd6\006" +
    "\uffd6\007\uffd6\017\uffd6\020\uffd6\037\uffd6\040\uffd6\054\uffd6" +
    "\055\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6\001" +
    "\002\000\036\004\uffd9\006\uffd9\007\uffd9\017\uffd9\020\uffd9" +
    "\037\uffd9\040\uffd9\054\uffd9\055\uffd9\066\uffd9\067\uffd9\070" +
    "\uffd9\071\uffd9\072\uffd9\001\002\000\036\004\uffd7\006\uffd7" +
    "\007\uffd7\017\uffd7\020\uffd7\037\uffd7\040\uffd7\054\uffd7\055" +
    "\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7\001\002" +
    "\000\004\016\236\001\002\000\036\004\uffd8\006\uffd8\007" +
    "\uffd8\017\uffd8\020\uffd8\037\uffd8\040\uffd8\054\uffd8\055\uffd8" +
    "\066\uffd8\067\uffd8\070\uffd8\071\uffd8\072\uffd8\001\002\000" +
    "\036\004\uffdb\006\uffdb\007\uffdb\017\uffdb\020\uffdb\037\uffdb" +
    "\040\uffdb\054\uffdb\055\uffdb\066\uffdb\067\uffdb\070\uffdb\071" +
    "\uffdb\072\uffdb\001\002\000\036\004\uffd5\006\uffd5\007\uffd5" +
    "\017\uffd5\020\uffd5\037\uffd5\040\uffd5\054\uffd5\055\uffd5\066" +
    "\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5\001\002\000\006" +
    "\006\036\007\035\001\002\000\036\004\uffdc\006\uffdc\007" +
    "\uffdc\017\uffdc\020\uffdc\037\uffdc\040\uffdc\054\uffdc\055\uffdc" +
    "\066\uffdc\067\uffdc\070\uffdc\071\uffdc\072\uffdc\001\002\000" +
    "\064\002\uff81\004\uff81\011\uff81\023\uff81\025\uff81\035\uff81" +
    "\036\uff81\040\uff81\041\uff81\043\uff81\044\uff81\045\uff81\047" +
    "\uff81\050\uff81\051\uff81\052\uff81\053\uff81\061\uff81\062\uff81" +
    "\063\uff81\064\uff81\065\uff81\073\uff81\074\uff81\076\uff81\001" +
    "\002\000\034\004\047\007\uffa5\011\073\023\061\025\066" +
    "\035\041\036\060\041\057\073\054\074\072\075\043\076" +
    "\074\077\065\001\002\000\016\007\uffd2\020\uffd2\021\uffd2" +
    "\024\uffd2\037\uffd2\040\uffd2\001\002\000\054\007\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\013\uffe6\014\103\015\uffe6\016\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\024\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\037\uffe6\040\uffe6" +
    "\001\002\000\010\004\014\073\054\074\072\001\002\000" +
    "\034\010\126\011\120\012\124\013\133\016\127\022\215" +
    "\026\117\027\136\030\132\031\130\032\134\033\135\034" +
    "\137\001\002\000\016\007\uffd4\020\uffd4\021\uffd4\024\uffd4" +
    "\037\uffd4\040\uffd4\001\002\000\042\007\uffdd\010\uff9a\011" +
    "\uff9a\012\uff9a\013\uff9a\016\uff9a\020\uffdd\022\uff9a\026\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\037" +
    "\uffdd\001\002\000\050\007\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\016\uffe0\020\uffe0\021\uffe0\022\uffe0\024\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\037\uffe0\040\uffe0\001\002\000\050\007\uffbf\010\uffbf\011" +
    "\uffbf\012\uffbf\013\uffbf\016\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\024\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\037\uffbf\040\uffbf\001\002\000\056\006\uffb2" +
    "\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\015\173\016" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\023\172\024\uffb2\026\uffb2" +
    "\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\037" +
    "\uffb2\040\uffb2\001\002\000\042\007\uffcd\010\uff96\011\uff96" +
    "\012\uff96\013\uff96\016\uff96\020\uffcd\022\uff96\026\uff96\027" +
    "\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96\037\uffcd" +
    "\001\002\000\010\007\uffa9\020\170\037\uffa9\001\002\000" +
    "\042\007\uffd0\010\uff98\011\uff98\012\uff98\013\uff98\016\uff98" +
    "\020\uffd0\022\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032" +
    "\uff98\033\uff98\034\uff98\037\uffd0\001\002\000\042\007\uffcf" +
    "\010\uff95\011\uff95\012\uff95\013\uff95\016\uff95\020\uffcf\022" +
    "\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95" +
    "\034\uff95\037\uffcf\001\002\000\052\007\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\016\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\024\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033" +
    "\ufff6\034\ufff6\035\ufff6\037\ufff6\040\ufff6\001\002\000\010" +
    "\007\uffa8\020\166\037\uffa8\001\002\000\050\007\uffde\010" +
    "\uffde\011\uffde\012\uffde\013\uffde\016\uffde\020\uffde\021\uffde" +
    "\022\uffde\024\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\037\uffde\040\uffde\001\002\000\026" +
    "\004\047\011\073\023\061\040\uffc5\041\057\073\054\074" +
    "\072\075\043\076\074\077\065\001\002\000\026\004\047" +
    "\011\073\023\061\025\066\035\041\036\060\041\057\073" +
    "\054\074\072\076\074\001\002\000\026\004\047\011\073" +
    "\023\061\024\uffbc\041\057\073\054\074\072\075\043\076" +
    "\074\077\065\001\002\000\040\007\uff9f\010\126\011\120" +
    "\012\124\013\133\016\127\020\uff9f\026\117\027\136\030" +
    "\132\031\130\032\134\033\135\034\137\037\uff9f\001\002" +
    "\000\042\007\uffe9\010\uff99\011\uff99\012\uff99\013\uff99\016" +
    "\uff99\020\uffe9\022\uff99\026\uff99\027\uff99\030\uff99\031\uff99" +
    "\032\uff99\033\uff99\034\uff99\037\uffe9\001\002\000\050\007" +
    "\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\016\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\024\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\037\uffe2\040\uffe2\001\002" +
    "\000\016\007\uffce\020\uffce\021\uffce\024\uffce\037\uffce\040" +
    "\uffce\001\002\000\026\004\047\011\073\023\061\025\066" +
    "\035\041\036\060\041\057\073\054\074\072\076\074\001" +
    "\002\000\050\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\016\uffc0\020\uffc0\021\uffc0\022\uffc0\024\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\037\uffc0" +
    "\040\uffc0\001\002\000\050\007\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\016\uffdf\020\uffdf\021\uffdf\022\uffdf\024\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\037\uffdf\040\uffdf\001\002\000\016\007\uffd3\020\uffd3" +
    "\021\uffd3\024\uffd3\037\uffd3\040\uffd3\001\002\000\052\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\016\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\024\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\037\ufff7\040\ufff7" +
    "\001\002\000\004\076\074\001\002\000\054\007\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\024\uffe8\026\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\037\uffe8\040\uffe8" +
    "\001\002\000\004\007\106\001\002\000\052\007\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\013\100\015\101\016\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\024\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\037\uffe1\040\uffe1\001\002" +
    "\000\042\007\uffd1\010\uff97\011\uff97\012\uff97\013\uff97\016" +
    "\uff97\020\uffd1\022\uff97\026\uff97\027\uff97\030\uff97\031\uff97" +
    "\032\uff97\033\uff97\034\uff97\037\uffd1\001\002\000\006\011" +
    "\073\076\074\001\002\000\004\076\074\001\002\000\052" +
    "\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\103\016" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\024\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\037\uffe3\040" +
    "\uffe3\001\002\000\004\076\104\001\002\000\054\007\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\024\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\037\uffe7\040" +
    "\uffe7\001\002\000\050\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\016\uffe4\020\uffe4\021\uffe4\022\uffe4\024\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\037\uffe4\040\uffe4\001\002\000\064\002\uff82\004\uff82\011" +
    "\uff82\023\uff82\025\uff82\035\uff82\036\uff82\040\uff82\041\uff82" +
    "\043\uff82\044\uff82\045\uff82\047\uff82\050\uff82\051\uff82\052" +
    "\uff82\053\uff82\061\uff82\062\uff82\063\uff82\064\uff82\065\uff82" +
    "\073\uff82\074\uff82\076\uff82\001\002\000\054\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\103\015\uffe5\016\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\024\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\037\uffe5\040\uffe5" +
    "\001\002\000\042\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013" +
    "\uff9a\016\uff9a\020\uff9a\022\uff9a\026\uff9a\027\uff9a\030\uff9a" +
    "\031\uff9a\032\uff9a\033\uff9a\034\uff9a\037\uff9a\001\002\000" +
    "\042\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\016\uff96" +
    "\020\uff96\022\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032" +
    "\uff96\033\uff96\034\uff96\037\uff96\001\002\000\042\007\uff95" +
    "\010\uff95\011\uff95\012\uff95\013\uff95\016\uff95\020\uff95\022" +
    "\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95" +
    "\034\uff95\037\uff95\001\002\000\042\007\uff98\010\uff98\011" +
    "\uff98\012\uff98\013\uff98\016\uff98\020\uff98\022\uff98\026\uff98" +
    "\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98\037" +
    "\uff98\001\002\000\010\007\uff9e\020\uff9e\037\uff9e\001\002" +
    "\000\042\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\016" +
    "\uff99\020\uff99\022\uff99\026\uff99\027\uff99\030\uff99\031\uff99" +
    "\032\uff99\033\uff99\034\uff99\037\uff99\001\002\000\042\007" +
    "\uff97\010\uff97\011\uff97\012\uff97\013\uff97\016\uff97\020\uff97" +
    "\022\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033" +
    "\uff97\034\uff97\037\uff97\001\002\000\026\004\uff8b\011\uff8b" +
    "\023\uff8b\025\uff8b\035\uff8b\036\uff8b\041\uff8b\073\uff8b\074" +
    "\uff8b\076\uff8b\001\002\000\026\004\uff8f\011\uff8f\023\uff8f" +
    "\025\uff8f\035\uff8f\036\uff8f\041\uff8f\073\uff8f\074\uff8f\076" +
    "\uff8f\001\002\000\026\004\047\011\073\023\061\025\066" +
    "\035\041\036\060\041\057\073\054\074\072\076\074\001" +
    "\002\000\026\004\uff86\011\uff86\023\uff86\025\uff86\035\uff86" +
    "\036\uff86\041\uff86\073\uff86\074\uff86\076\uff86\001\002\000" +
    "\026\004\uff85\011\uff85\023\uff85\025\uff85\035\uff85\036\uff85" +
    "\041\uff85\073\uff85\074\uff85\076\uff85\001\002\000\026\004" +
    "\uff8e\011\uff8e\023\uff8e\025\uff8e\035\uff8e\036\uff8e\041\uff8e" +
    "\073\uff8e\074\uff8e\076\uff8e\001\002\000\026\004\uff88\011" +
    "\uff88\023\uff88\025\uff88\035\uff88\036\uff88\041\uff88\073\uff88" +
    "\074\uff88\076\uff88\001\002\000\026\004\uff90\011\uff90\023" +
    "\uff90\025\uff90\035\uff90\036\uff90\041\uff90\073\uff90\074\uff90" +
    "\076\uff90\001\002\000\026\004\uff91\011\uff91\023\uff91\025" +
    "\uff91\035\uff91\036\uff91\041\uff91\073\uff91\074\uff91\076\uff91" +
    "\001\002\000\026\004\uff94\011\uff94\023\uff94\025\uff94\035" +
    "\uff94\036\uff94\041\uff94\073\uff94\074\uff94\076\uff94\001\002" +
    "\000\026\004\uff87\011\uff87\023\uff87\025\uff87\035\uff87\036" +
    "\uff87\041\uff87\073\uff87\074\uff87\076\uff87\001\002\000\026" +
    "\004\uff89\011\uff89\023\uff89\025\uff89\035\uff89\036\uff89\041" +
    "\uff89\073\uff89\074\uff89\076\uff89\001\002\000\026\004\uff8d" +
    "\011\uff8d\023\uff8d\025\uff8d\035\uff8d\036\uff8d\041\uff8d\073" +
    "\uff8d\074\uff8d\076\uff8d\001\002\000\026\004\uff93\011\uff93" +
    "\023\uff93\025\uff93\035\uff93\036\uff93\041\uff93\073\uff93\074" +
    "\uff93\076\uff93\001\002\000\026\004\uff8c\011\uff8c\023\uff8c" +
    "\025\uff8c\035\uff8c\036\uff8c\041\uff8c\073\uff8c\074\uff8c\076" +
    "\uff8c\001\002\000\026\004\uff8a\011\uff8a\023\uff8a\025\uff8a" +
    "\035\uff8a\036\uff8a\041\uff8a\073\uff8a\074\uff8a\076\uff8a\001" +
    "\002\000\026\004\uff92\011\uff92\023\uff92\025\uff92\035\uff92" +
    "\036\uff92\041\uff92\073\uff92\074\uff92\076\uff92\001\002\000" +
    "\010\007\uffa0\020\uffa0\037\uffa0\001\002\000\014\007\uffdd" +
    "\020\uffdd\021\uffdd\024\uffdd\040\uffdd\001\002\000\006\020" +
    "\152\024\uffbe\001\002\000\014\007\uffcd\020\uffcd\021\uffcd" +
    "\024\uffcd\040\uffcd\001\002\000\014\007\uffd0\020\uffd0\021" +
    "\uffd0\024\uffd0\040\uffd0\001\002\000\014\007\uffcf\020\uffcf" +
    "\021\uffcf\024\uffcf\040\uffcf\001\002\000\004\024\151\001" +
    "\002\000\016\007\uffe9\020\uffe9\021\uffe9\024\uffe9\035\uffe9" +
    "\040\uffe9\001\002\000\014\007\uffd1\020\uffd1\021\uffd1\024" +
    "\uffd1\040\uffd1\001\002\000\050\007\uffc1\010\uffc1\011\uffc1" +
    "\012\uffc1\013\uffc1\016\uffc1\020\uffc1\021\uffc1\022\uffc1\024" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\037\uffc1\040\uffc1\001\002\000\026\004\047\011" +
    "\073\023\061\024\uffbc\041\057\073\054\074\072\075\043" +
    "\076\074\077\065\001\002\000\004\024\uffbd\001\002\000" +
    "\004\037\155\001\002\000\010\007\uff9d\020\uff9d\037\uff9d" +
    "\001\002\000\004\021\164\001\002\000\004\040\163\001" +
    "\002\000\006\020\161\040\uffc7\001\002\000\026\004\047" +
    "\011\073\023\061\040\uffc5\041\057\073\054\074\072\075" +
    "\043\076\074\077\065\001\002\000\004\040\uffc6\001\002" +
    "\000\050\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\016" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\024\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\037\uffc8\040" +
    "\uffc8\001\002\000\024\004\047\011\073\023\061\041\057" +
    "\073\054\074\072\075\043\076\074\077\065\001\002\000" +
    "\006\020\uffc4\040\uffc4\001\002\000\036\004\047\007\uffa5" +
    "\011\073\023\061\025\066\035\041\036\060\037\uffa5\041" +
    "\057\073\054\074\072\075\043\076\074\077\065\001\002" +
    "\000\006\007\uffa6\037\uffa6\001\002\000\036\004\047\007" +
    "\uffa5\011\073\023\061\025\066\035\041\036\060\037\uffa5" +
    "\041\057\073\054\074\072\075\043\076\074\077\065\001" +
    "\002\000\006\007\uffa7\037\uffa7\001\002\000\012\004\200" +
    "\011\073\021\175\076\074\001\002\000\006\004\014\057" +
    "\174\001\002\000\050\007\uffbb\010\uffbb\011\uffbb\012\uffbb" +
    "\013\uffbb\016\uffbb\020\uffbb\021\uffbb\022\uffbb\024\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\037\uffbb\040\uffbb\001\002\000\010\004\206\011\073\076" +
    "\074\001\002\000\004\024\211\001\002\000\014\013\uffe6" +
    "\014\103\015\uffe6\021\203\024\uffe6\001\002\000\006\015" +
    "\202\024\201\001\002\000\050\007\uffb9\010\uffb9\011\uffb9" +
    "\012\uffb9\013\uffb9\016\uffb9\020\uffb9\021\uffb9\022\uffb9\024" +
    "\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\037\uffb9\040\uffb9\001\002\000\004\057\174\001" +
    "\002\000\012\004\206\011\073\024\204\076\074\001\002" +
    "\000\050\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\016" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\024\uffb5\026\uffb5\027\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\037\uffb5\040" +
    "\uffb5\001\002\000\004\024\uffe1\001\002\000\004\015\202" +
    "\001\002\000\004\024\210\001\002\000\050\007\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\013\uffb7\016\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\024\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\037\uffb7\040\uffb7\001\002\000\050" +
    "\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\016\uffba\020" +
    "\uffba\021\uffba\022\uffba\024\uffba\026\uffba\027\uffba\030\uffba" +
    "\031\uffba\032\uffba\033\uffba\034\uffba\037\uffba\040\uffba\001" +
    "\002\000\004\024\213\001\002\000\050\007\uffb6\010\uffb6" +
    "\011\uffb6\012\uffb6\013\uffb6\016\uffb6\020\uffb6\021\uffb6\022" +
    "\uffb6\024\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6" +
    "\033\uffb6\034\uffb6\037\uffb6\040\uffb6\001\002\000\026\004" +
    "\047\011\073\023\061\025\066\035\041\036\060\041\057" +
    "\073\054\074\072\076\074\001\002\000\026\004\047\011" +
    "\073\023\061\025\066\035\041\036\060\041\057\073\054" +
    "\074\072\076\074\001\002\000\042\007\uff9c\010\126\011" +
    "\120\012\124\013\133\016\127\020\uff9c\022\215\026\117" +
    "\027\136\030\132\031\130\032\134\033\135\034\137\037" +
    "\uff9c\001\002\000\010\007\uff9b\020\uff9b\037\uff9b\001\002" +
    "\000\042\007\uffa2\010\126\011\120\012\124\013\133\016" +
    "\127\020\uffa2\022\215\026\117\027\136\030\132\031\130" +
    "\032\134\033\135\034\137\037\uffa2\001\002\000\010\007" +
    "\uffa1\020\uffa1\037\uffa1\001\002\000\004\035\231\001\002" +
    "\000\004\035\224\001\002\000\004\004\225\001\002\000" +
    "\004\036\226\001\002\000\034\004\047\011\073\023\061" +
    "\025\066\035\041\036\060\037\uffa5\041\057\073\054\074" +
    "\072\075\043\076\074\077\065\001\002\000\004\037\230" +
    "\001\002\000\040\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013" +
    "\uffa4\016\uffa4\020\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4" +
    "\032\uffa4\033\uffa4\034\uffa4\037\uffa4\001\002\000\004\004" +
    "\232\001\002\000\004\036\233\001\002\000\034\004\047" +
    "\011\073\023\061\025\066\035\041\036\060\037\uffa5\041" +
    "\057\073\054\074\072\075\043\076\074\077\065\001\002" +
    "\000\004\037\235\001\002\000\040\007\uffa3\010\uffa3\011" +
    "\uffa3\012\uffa3\013\uffa3\016\uffa3\020\uffa3\026\uffa3\027\uffa3" +
    "\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\037\uffa3\001" +
    "\002\000\024\004\014\054\023\055\027\056\237\066\034" +
    "\067\031\070\022\071\025\072\030\001\002\000\004\017" +
    "\242\001\002\000\004\017\241\001\002\000\036\004\uffc3" +
    "\006\uffc3\007\uffc3\017\uffc3\020\uffc3\037\uffc3\040\uffc3\054" +
    "\uffc3\055\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3" +
    "\001\002\000\036\004\uffc2\006\uffc2\007\uffc2\017\uffc2\020" +
    "\uffc2\037\uffc2\040\uffc2\054\uffc2\055\uffc2\066\uffc2\067\uffc2" +
    "\070\uffc2\071\uffc2\072\uffc2\001\002\000\024\004\014\054" +
    "\023\055\027\056\244\066\034\067\031\070\022\071\025" +
    "\072\030\001\002\000\004\020\253\001\002\000\004\020" +
    "\246\001\002\000\024\004\014\054\023\055\027\056\247" +
    "\066\034\067\031\070\022\071\025\072\030\001\002\000" +
    "\004\017\252\001\002\000\004\017\251\001\002\000\036" +
    "\004\uffcc\006\uffcc\007\uffcc\017\uffcc\020\uffcc\037\uffcc\040" +
    "\uffcc\054\uffcc\055\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc" +
    "\072\uffcc\001\002\000\036\004\uffca\006\uffca\007\uffca\017" +
    "\uffca\020\uffca\037\uffca\040\uffca\054\uffca\055\uffca\066\uffca" +
    "\067\uffca\070\uffca\071\uffca\072\uffca\001\002\000\024\004" +
    "\014\054\023\055\027\056\254\066\034\067\031\070\022" +
    "\071\025\072\030\001\002\000\004\017\257\001\002\000" +
    "\004\017\256\001\002\000\036\004\uffcb\006\uffcb\007\uffcb" +
    "\017\uffcb\020\uffcb\037\uffcb\040\uffcb\054\uffcb\055\uffcb\066" +
    "\uffcb\067\uffcb\070\uffcb\071\uffcb\072\uffcb\001\002\000\036" +
    "\004\uffc9\006\uffc9\007\uffc9\017\uffc9\020\uffc9\037\uffc9\040" +
    "\uffc9\054\uffc9\055\uffc9\066\uffc9\067\uffc9\070\uffc9\071\uffc9" +
    "\072\uffc9\001\002\000\004\036\261\001\002\000\004\004" +
    "\014\001\002\000\004\021\u0104\001\002\000\004\037\267" +
    "\001\002\000\010\020\265\037\uffaf\040\uffaf\001\002\000" +
    "\004\004\014\001\002\000\006\037\uffae\040\uffae\001\002" +
    "\000\004\041\270\001\002\000\046\004\047\011\073\023" +
    "\061\025\066\035\041\036\060\041\057\043\301\045\303" +
    "\051\307\053\316\061\277\063\313\064\310\065\305\073" +
    "\054\074\072\076\074\001\002\000\056\004\uff70\011\uff70" +
    "\023\uff70\025\uff70\035\uff70\036\uff70\040\uff70\041\uff70\043" +
    "\uff70\044\uff70\045\uff70\047\uff70\050\uff70\051\uff70\053\uff70" +
    "\061\uff70\063\uff70\064\uff70\065\uff70\073\uff70\074\uff70\076" +
    "\uff70\001\002\000\056\004\uff6c\011\uff6c\023\uff6c\025\uff6c" +
    "\035\uff6c\036\uff6c\040\uff6c\041\uff6c\043\uff6c\044\uff6c\045" +
    "\uff6c\047\uff6c\050\uff6c\051\uff6c\053\uff6c\061\uff6c\063\uff6c" +
    "\064\uff6c\065\uff6c\073\uff6c\074\uff6c\076\uff6c\001\002\000" +
    "\050\004\047\011\073\023\061\025\066\035\041\036\060" +
    "\040\377\041\057\043\301\045\303\051\307\053\316\061" +
    "\277\063\313\064\310\065\305\073\054\074\072\076\074" +
    "\001\002\000\056\004\uff71\011\uff71\023\uff71\025\uff71\035" +
    "\uff71\036\uff71\040\uff71\041\uff71\043\uff71\044\uff71\045\uff71" +
    "\047\uff71\050\uff71\051\uff71\053\uff71\061\uff71\063\uff71\064" +
    "\uff71\065\uff71\073\uff71\074\uff71\076\uff71\001\002\000\056" +
    "\004\uff6a\011\uff6a\023\uff6a\025\uff6a\035\uff6a\036\uff6a\040" +
    "\uff6a\041\uff6a\043\uff6a\044\uff6a\045\uff6a\047\uff6a\050\uff6a" +
    "\051\uff6a\053\uff6a\061\uff6a\063\uff6a\064\uff6a\065\uff6a\073" +
    "\uff6a\074\uff6a\076\uff6a\001\002\000\056\004\uff6f\011\uff6f" +
    "\023\uff6f\025\uff6f\035\uff6f\036\uff6f\040\uff6f\041\uff6f\043" +
    "\uff6f\044\uff6f\045\uff6f\047\uff6f\050\uff6f\051\uff6f\053\uff6f" +
    "\061\uff6f\063\uff6f\064\uff6f\065\uff6f\073\uff6f\074\uff6f\076" +
    "\uff6f\001\002\000\004\004\014\001\002\000\056\004\uff6e" +
    "\011\uff6e\023\uff6e\025\uff6e\035\uff6e\036\uff6e\040\uff6e\041" +
    "\uff6e\043\uff6e\044\uff6e\045\uff6e\047\uff6e\050\uff6e\051\uff6e" +
    "\053\uff6e\061\uff6e\063\uff6e\064\uff6e\065\uff6e\073\uff6e\074" +
    "\uff6e\076\uff6e\001\002\000\046\004\047\011\073\023\061" +
    "\025\066\035\041\036\060\041\057\043\301\045\303\051" +
    "\307\053\316\061\277\063\313\064\310\065\305\073\054" +
    "\074\072\076\074\001\002\000\056\004\uff69\011\uff69\023" +
    "\uff69\025\uff69\035\uff69\036\uff69\040\uff69\041\uff69\043\uff69" +
    "\044\uff69\045\uff69\047\uff69\050\uff69\051\uff69\053\uff69\061" +
    "\uff69\063\uff69\064\uff69\065\uff69\073\uff69\074\uff69\076\uff69" +
    "\001\002\000\004\036\346\001\002\000\056\004\uff66\011" +
    "\uff66\023\uff66\025\uff66\035\uff66\036\uff66\040\uff66\041\uff66" +
    "\043\uff66\044\uff66\045\uff66\047\uff66\050\uff66\051\uff66\053" +
    "\uff66\061\uff66\063\uff66\064\uff66\065\uff66\073\uff66\074\uff66" +
    "\076\uff66\001\002\000\034\004\047\007\343\011\073\023" +
    "\061\025\066\035\041\036\060\041\057\073\054\074\072" +
    "\075\043\076\074\077\065\001\002\000\056\004\uff6b\011" +
    "\uff6b\023\uff6b\025\uff6b\035\uff6b\036\uff6b\040\uff6b\041\uff6b" +
    "\043\uff6b\044\uff6b\045\uff6b\047\uff6b\050\uff6b\051\uff6b\053" +
    "\uff6b\061\uff6b\063\uff6b\064\uff6b\065\uff6b\073\uff6b\074\uff6b" +
    "\076\uff6b\001\002\000\026\004\047\007\337\011\073\023" +
    "\061\041\057\073\054\074\072\075\043\076\074\077\065" +
    "\001\002\000\004\004\014\001\002\000\056\004\uff68\011" +
    "\uff68\023\uff68\025\uff68\035\uff68\036\uff68\040\uff68\041\uff68" +
    "\043\uff68\044\uff68\045\uff68\047\uff68\050\uff68\051\uff68\053" +
    "\uff68\061\uff68\063\uff68\064\uff68\065\uff68\073\uff68\074\uff68" +
    "\076\uff68\001\002\000\040\006\327\010\uff96\011\uff96\012" +
    "\uff96\013\uff96\016\uff96\021\021\022\uff96\026\uff96\027\uff96" +
    "\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96\001\002\000" +
    "\022\004\014\054\023\055\027\066\034\067\031\070\022" +
    "\071\025\072\030\001\002\000\056\004\uff6d\011\uff6d\023" +
    "\uff6d\025\uff6d\035\uff6d\036\uff6d\040\uff6d\041\uff6d\043\uff6d" +
    "\044\uff6d\045\uff6d\047\uff6d\050\uff6d\051\uff6d\053\uff6d\061" +
    "\uff6d\063\uff6d\064\uff6d\065\uff6d\073\uff6d\074\uff6d\076\uff6d" +
    "\001\002\000\004\007\323\001\002\000\032\004\047\011" +
    "\073\023\061\025\066\035\041\036\060\041\057\073\054" +
    "\074\072\075\043\076\074\077\065\001\002\000\004\007" +
    "\322\001\002\000\004\007\321\001\002\000\056\004\uff7e" +
    "\011\uff7e\023\uff7e\025\uff7e\035\uff7e\036\uff7e\040\uff7e\041" +
    "\uff7e\043\uff7e\044\uff7e\045\uff7e\047\uff7e\050\uff7e\051\uff7e" +
    "\053\uff7e\061\uff7e\063\uff7e\064\uff7e\065\uff7e\073\uff7e\074" +
    "\uff7e\076\uff7e\001\002\000\056\004\uff7f\011\uff7f\023\uff7f" +
    "\025\uff7f\035\uff7f\036\uff7f\040\uff7f\041\uff7f\043\uff7f\044" +
    "\uff7f\045\uff7f\047\uff7f\050\uff7f\051\uff7f\053\uff7f\061\uff7f" +
    "\063\uff7f\064\uff7f\065\uff7f\073\uff7f\074\uff7f\076\uff7f\001" +
    "\002\000\056\004\uff72\011\uff72\023\uff72\025\uff72\035\uff72" +
    "\036\uff72\040\uff72\041\uff72\043\uff72\044\uff72\045\uff72\047" +
    "\uff72\050\uff72\051\uff72\053\uff72\061\uff72\063\uff72\064\uff72" +
    "\065\uff72\073\uff72\074\uff72\076\uff72\001\002\000\022\004" +
    "\014\054\023\055\027\066\034\067\031\070\022\071\025" +
    "\072\030\001\002\000\004\007\326\001\002\000\056\004" +
    "\uffac\011\uffac\023\uffac\025\uffac\035\uffac\036\uffac\040\uffac" +
    "\041\uffac\043\uffac\044\uffac\045\uffac\047\uffac\050\uffac\051" +
    "\uffac\053\uffac\061\uffac\063\uffac\064\uffac\065\uffac\073\uffac" +
    "\074\uffac\076\uffac\001\002\000\032\004\047\011\073\023" +
    "\061\025\066\035\041\036\060\041\057\073\054\074\072" +
    "\075\043\076\074\077\065\001\002\000\004\007\333\001" +
    "\002\000\004\007\332\001\002\000\056\004\uff83\011\uff83" +
    "\023\uff83\025\uff83\035\uff83\036\uff83\040\uff83\041\uff83\043" +
    "\uff83\044\uff83\045\uff83\047\uff83\050\uff83\051\uff83\053\uff83" +
    "\061\uff83\063\uff83\064\uff83\065\uff83\073\uff83\074\uff83\076" +
    "\uff83\001\002\000\056\004\uff84\011\uff84\023\uff84\025\uff84" +
    "\035\uff84\036\uff84\040\uff84\041\uff84\043\uff84\044\uff84\045" +
    "\uff84\047\uff84\050\uff84\051\uff84\053\uff84\061\uff84\063\uff84" +
    "\064\uff84\065\uff84\073\uff84\074\uff84\076\uff84\001\002\000" +
    "\004\007\335\001\002\000\056\004\uff80\011\uff80\023\uff80" +
    "\025\uff80\035\uff80\036\uff80\040\uff80\041\uff80\043\uff80\044" +
    "\uff80\045\uff80\047\uff80\050\uff80\051\uff80\053\uff80\061\uff80" +
    "\063\uff80\064\uff80\065\uff80\073\uff80\074\uff80\076\uff80\001" +
    "\002\000\004\007\340\001\002\000\056\004\uff79\011\uff79" +
    "\023\uff79\025\uff79\035\uff79\036\uff79\040\uff79\041\uff79\043" +
    "\uff79\044\uff79\045\uff79\047\uff79\050\uff79\051\uff79\053\uff79" +
    "\061\uff79\063\uff79\064\uff79\065\uff79\073\uff79\074\uff79\076" +
    "\uff79\001\002\000\056\004\uff78\011\uff78\023\uff78\025\uff78" +
    "\035\uff78\036\uff78\040\uff78\041\uff78\043\uff78\044\uff78\045" +
    "\uff78\047\uff78\050\uff78\051\uff78\053\uff78\061\uff78\063\uff78" +
    "\064\uff78\065\uff78\073\uff78\074\uff78\076\uff78\001\002\000" +
    "\004\007\345\001\002\000\004\007\344\001\002\000\056" +
    "\004\uff7b\011\uff7b\023\uff7b\025\uff7b\035\uff7b\036\uff7b\040" +
    "\uff7b\041\uff7b\043\uff7b\044\uff7b\045\uff7b\047\uff7b\050\uff7b" +
    "\051\uff7b\053\uff7b\061\uff7b\063\uff7b\064\uff7b\065\uff7b\073" +
    "\uff7b\074\uff7b\076\uff7b\001\002\000\056\004\uff7c\011\uff7c" +
    "\023\uff7c\025\uff7c\035\uff7c\036\uff7c\040\uff7c\041\uff7c\043" +
    "\uff7c\044\uff7c\045\uff7c\047\uff7c\050\uff7c\051\uff7c\053\uff7c" +
    "\061\uff7c\063\uff7c\064\uff7c\065\uff7c\073\uff7c\074\uff7c\076" +
    "\uff7c\001\002\000\056\004\uff7d\011\uff7d\023\uff7d\025\uff7d" +
    "\035\uff7d\036\uff7d\040\uff7d\041\uff7d\043\uff7d\044\uff7d\045" +
    "\uff7d\047\uff7d\050\uff7d\051\uff7d\053\uff7d\061\uff7d\063\uff7d" +
    "\064\uff7d\065\uff7d\073\uff7d\074\uff7d\076\uff7d\001\002\000" +
    "\026\004\047\011\073\023\061\025\066\035\041\036\060" +
    "\041\057\073\054\074\072\076\074\001\002\000\004\037" +
    "\361\001\002\000\004\037\351\001\002\000\004\046\352" +
    "\001\002\000\046\004\047\011\073\023\061\025\066\035" +
    "\041\036\060\041\057\043\301\045\303\051\307\053\316" +
    "\061\277\063\313\064\310\065\305\073\054\074\072\076" +
    "\074\001\002\000\052\004\047\011\073\023\061\025\066" +
    "\035\041\036\060\041\057\043\301\045\303\047\356\050" +
    "\354\051\307\053\316\061\277\063\313\064\310\065\305" +
    "\073\054\074\072\076\074\001\002\000\056\004\uff74\011" +
    "\uff74\023\uff74\025\uff74\035\uff74\036\uff74\040\uff74\041\uff74" +
    "\043\uff74\044\uff74\045\uff74\047\uff74\050\uff74\051\uff74\053" +
    "\uff74\061\uff74\063\uff74\064\uff74\065\uff74\073\uff74\074\uff74" +
    "\076\uff74\001\002\000\056\004\uff67\011\uff67\023\uff67\025" +
    "\uff67\035\uff67\036\uff67\040\uff67\041\uff67\043\uff67\044\uff67" +
    "\045\uff67\047\uff67\050\uff67\051\uff67\053\uff67\061\uff67\063" +
    "\uff67\064\uff67\065\uff67\073\uff67\074\uff67\076\uff67\001\002" +
    "\000\046\004\047\011\073\023\061\025\066\035\041\036" +
    "\060\041\057\043\301\045\303\051\307\053\316\061\277" +
    "\063\313\064\310\065\305\073\054\074\072\076\074\001" +
    "\002\000\050\004\047\011\073\023\061\025\066\035\041" +
    "\036\060\041\057\043\301\045\303\050\360\051\307\053" +
    "\316\061\277\063\313\064\310\065\305\073\054\074\072" +
    "\076\074\001\002\000\056\004\uff75\011\uff75\023\uff75\025" +
    "\uff75\035\uff75\036\uff75\040\uff75\041\uff75\043\uff75\044\uff75" +
    "\045\uff75\047\uff75\050\uff75\051\uff75\053\uff75\061\uff75\063" +
    "\uff75\064\uff75\065\uff75\073\uff75\074\uff75\076\uff75\001\002" +
    "\000\004\046\362\001\002\000\046\004\047\011\073\023" +
    "\061\025\066\035\041\036\060\041\057\043\301\045\303" +
    "\051\307\053\316\061\277\063\313\064\310\065\305\073" +
    "\054\074\072\076\074\001\002\000\052\004\047\011\073" +
    "\023\061\025\066\035\041\036\060\041\057\043\301\045" +
    "\303\047\365\050\364\051\307\053\316\061\277\063\313" +
    "\064\310\065\305\073\054\074\072\076\074\001\002\000" +
    "\056\004\uff77\011\uff77\023\uff77\025\uff77\035\uff77\036\uff77" +
    "\040\uff77\041\uff77\043\uff77\044\uff77\045\uff77\047\uff77\050" +
    "\uff77\051\uff77\053\uff77\061\uff77\063\uff77\064\uff77\065\uff77" +
    "\073\uff77\074\uff77\076\uff77\001\002\000\046\004\047\011" +
    "\073\023\061\025\066\035\041\036\060\041\057\043\301" +
    "\045\303\051\307\053\316\061\277\063\313\064\310\065" +
    "\305\073\054\074\072\076\074\001\002\000\050\004\047" +
    "\011\073\023\061\025\066\035\041\036\060\041\057\043" +
    "\301\045\303\050\367\051\307\053\316\061\277\063\313" +
    "\064\310\065\305\073\054\074\072\076\074\001\002\000" +
    "\056\004\uff76\011\uff76\023\uff76\025\uff76\035\uff76\036\uff76" +
    "\040\uff76\041\uff76\043\uff76\044\uff76\045\uff76\047\uff76\050" +
    "\uff76\051\uff76\053\uff76\061\uff76\063\uff76\064\uff76\065\uff76" +
    "\073\uff76\074\uff76\076\uff76\001\002\000\050\004\047\011" +
    "\073\023\061\025\066\035\041\036\060\041\057\043\301" +
    "\044\371\045\303\051\307\053\316\061\277\063\313\064" +
    "\310\065\305\073\054\074\072\076\074\001\002\000\056" +
    "\004\uff7a\011\uff7a\023\uff7a\025\uff7a\035\uff7a\036\uff7a\040" +
    "\uff7a\041\uff7a\043\uff7a\044\uff7a\045\uff7a\047\uff7a\050\uff7a" +
    "\051\uff7a\053\uff7a\061\uff7a\063\uff7a\064\uff7a\065\uff7a\073" +
    "\uff7a\074\uff7a\076\uff7a\001\002\000\004\041\373\001\002" +
    "\000\004\004\014\001\002\000\004\040\375\001\002\000" +
    "\004\007\376\001\002\000\056\004\uffad\011\uffad\023\uffad" +
    "\025\uffad\035\uffad\036\uffad\040\uffad\041\uffad\043\uffad\044" +
    "\uffad\045\uffad\047\uffad\050\uffad\051\uffad\053\uffad\061\uffad" +
    "\063\uffad\064\uffad\065\uffad\073\uffad\074\uffad\076\uffad\001" +
    "\002\000\006\007\u0100\021\u0101\001\002\000\012\002\uffab" +
    "\004\uffab\052\uffab\062\uffab\001\002\000\022\004\014\054" +
    "\023\055\027\066\034\067\031\070\022\071\025\072\030" +
    "\001\002\000\004\007\u0103\001\002\000\012\002\uffaa\004" +
    "\uffaa\052\uffaa\062\uffaa\001\002\000\022\004\014\054\023" +
    "\055\027\066\034\067\031\070\022\071\025\072\030\001" +
    "\002\000\010\020\uffb0\037\uffb0\040\uffb0\001\002\000\010" +
    "\002\ufffe\004\014\062\011\001\002\000\004\002\ufffd\001" +
    "\002\000\004\002\000\001\002\000\004\002\uffff\001\002" +
    "\000\046\004\047\011\073\023\061\025\066\035\041\036" +
    "\060\041\057\043\301\045\303\051\307\053\316\061\277" +
    "\063\313\064\310\065\305\073\054\074\072\076\074\001" +
    "\002\000\050\004\047\011\073\023\061\025\066\035\041" +
    "\036\060\040\u010c\041\057\043\301\045\303\051\307\053" +
    "\316\061\277\063\313\064\310\065\305\073\054\074\072" +
    "\076\074\001\002\000\004\007\u010d\001\002\000\010\002" +
    "\uff73\004\uff73\062\uff73\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010b\000\020\045\012\053\011\064\006\074\003\075" +
    "\005\076\007\077\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\045\012\053\011\074\003\076\u0108\077" +
    "\014\001\001\000\002\001\001\000\004\075\u0105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\045\012\053\011\074\003\076\015" +
    "\077\014\001\001\000\002\001\001\000\004\045\017\001" +
    "\001\000\002\001\001\000\012\002\023\003\025\043\032" +
    "\045\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\004\075\005\067\006\055\007\076\010\051\011" +
    "\070\012\044\013\036\016\043\017\062\020\045\027\063" +
    "\031\052\032\066\042\037\044\050\045\047\050\074\054" +
    "\061\055\054\056\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\222\017\146\045\221\001\001\000" +
    "\014\057\124\060\130\061\121\062\122\063\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\004\075" +
    "\005\067\006\055\007\147\010\143\011\070\012\044\013" +
    "\036\016\140\017\146\020\045\024\157\025\156\027\063" +
    "\031\144\032\066\042\037\044\155\045\142\001\001\000" +
    "\044\004\075\005\067\006\055\007\115\010\112\012\044" +
    "\016\107\017\114\020\045\027\063\031\111\032\066\042" +
    "\037\045\110\054\061\055\153\056\041\001\001\000\046" +
    "\004\075\005\067\006\055\007\147\010\143\011\070\012" +
    "\044\013\036\016\140\017\146\020\045\026\145\027\063" +
    "\031\144\032\066\042\037\044\141\045\142\001\001\000" +
    "\014\057\124\060\130\061\121\062\122\063\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\004\075\005\067\006\055\007\115\010\112\012\044" +
    "\016\107\017\114\020\045\027\063\031\111\032\066\042" +
    "\037\045\110\054\061\055\113\056\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\104\042\037\001\001\000\004\042\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\004\075\005\067\006" +
    "\055\007\115\010\112\012\044\016\107\017\114\020\045" +
    "\027\063\031\111\032\066\042\037\045\110\054\061\055" +
    "\137\056\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\004" +
    "\075\005\067\006\055\007\147\010\143\011\070\012\044" +
    "\013\036\016\140\017\146\020\045\026\152\027\063\031" +
    "\144\032\066\042\037\044\141\045\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\004\075" +
    "\005\067\006\055\007\147\010\143\011\070\012\044\013" +
    "\036\016\140\017\146\020\045\024\157\025\161\027\063" +
    "\031\144\032\066\042\037\044\155\045\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\004\075\005\067" +
    "\006\055\007\147\010\143\011\070\012\044\013\036\016" +
    "\140\017\146\020\045\027\063\031\144\032\066\042\037" +
    "\044\164\045\142\001\001\000\002\001\001\000\054\004" +
    "\075\005\067\006\055\007\076\010\051\011\070\012\044" +
    "\013\036\016\043\017\062\020\045\027\063\031\052\032" +
    "\066\042\037\044\050\045\047\050\166\054\061\055\054" +
    "\056\041\001\001\000\002\001\001\000\054\004\075\005" +
    "\067\006\055\007\076\010\051\011\070\012\044\013\036" +
    "\016\043\017\062\020\045\027\063\031\052\032\066\042" +
    "\037\044\050\045\047\050\170\054\061\055\054\056\041" +
    "\001\001\000\002\001\001\000\022\004\075\005\067\006" +
    "\055\012\044\013\175\016\140\027\063\042\176\001\001" +
    "\000\004\045\017\001\001\000\002\001\001\000\012\004" +
    "\204\012\211\027\063\042\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\204\012\206\027\063\042\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\004\075\005" +
    "\067\006\055\007\115\010\112\012\044\016\107\017\114" +
    "\020\045\027\063\031\111\032\066\042\037\045\110\054" +
    "\061\055\220\056\217\001\001\000\044\004\075\005\067" +
    "\006\055\007\115\010\112\012\044\016\107\017\114\020" +
    "\045\027\063\031\111\032\066\042\037\045\110\054\061" +
    "\055\216\056\215\001\001\000\014\057\124\060\130\061" +
    "\121\062\122\063\213\001\001\000\002\001\001\000\014" +
    "\057\124\060\130\061\121\062\122\063\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\004\075\005\067\006" +
    "\055\007\076\010\051\011\070\012\044\013\036\016\043" +
    "\017\062\020\045\027\063\031\052\032\066\042\037\044" +
    "\050\045\047\050\226\054\061\055\054\056\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\004\075\005\067\006\055\007\076" +
    "\010\051\011\070\012\044\013\036\016\043\017\062\020" +
    "\045\027\063\031\052\032\066\042\037\044\050\045\047" +
    "\050\233\054\061\055\054\056\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\023\003\025\043\237" +
    "\045\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\023\003\025" +
    "\043\244\045\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\023\003\025\043\247\045\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\023\003\025\043\254\045\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\045\261" +
    "\046\263\047\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\045\261\046\263\047\265" +
    "\001\001\000\002\001\001\000\002\001\001\000\074\004" +
    "\075\005\067\006\055\007\115\010\112\012\044\016\107" +
    "\017\114\020\045\027\063\031\111\032\066\033\272\034" +
    "\303\042\037\045\311\051\310\052\301\054\061\055\314" +
    "\056\041\065\270\066\275\067\277\070\313\071\271\072" +
    "\305\073\274\074\273\001\001\000\002\001\001\000\002" +
    "\001\001\000\072\004\075\005\067\006\055\007\115\010" +
    "\112\012\044\016\107\017\114\020\045\027\063\031\111" +
    "\032\066\034\354\042\037\045\311\051\310\052\301\054" +
    "\061\055\314\056\041\065\270\066\275\067\277\070\313" +
    "\071\271\072\305\073\274\074\273\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\371" +
    "\001\001\000\002\001\001\000\074\004\075\005\067\006" +
    "\055\007\115\010\112\012\044\016\107\017\114\020\045" +
    "\027\063\031\111\032\066\033\367\034\303\042\037\045" +
    "\311\051\310\052\301\054\061\055\314\056\041\065\270" +
    "\066\275\067\277\070\313\071\271\072\305\073\274\074" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\004\075\005\067\006\055\007\076\010" +
    "\051\011\070\012\044\013\036\016\043\017\062\020\045" +
    "\027\063\031\052\032\066\042\037\044\340\045\047\054" +
    "\061\055\341\056\041\001\001\000\002\001\001\000\044" +
    "\004\075\005\067\006\055\007\147\010\143\011\070\012" +
    "\044\013\036\016\140\017\146\020\045\027\063\031\144" +
    "\032\066\042\037\044\335\045\142\001\001\000\004\045" +
    "\333\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\023\003\025\043\323\045\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\004\075\005\067\006\055" +
    "\007\076\010\051\011\070\012\044\013\036\016\043\017" +
    "\062\020\045\027\063\031\052\032\066\042\037\044\316" +
    "\045\047\054\061\055\317\056\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\023\003\025\043\324\045" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\004\075\005\067\006\055\007\076\010\051\011\070\012" +
    "\044\013\036\016\043\017\062\020\045\027\063\031\052" +
    "\032\066\042\037\044\327\045\047\054\061\055\330\056" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\004\075\005\067" +
    "\006\055\007\115\010\112\011\347\012\044\016\107\017" +
    "\062\020\045\027\063\031\111\032\066\042\037\045\110" +
    "\054\061\055\346\056\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\074\004\075\005\067" +
    "\006\055\007\115\010\112\012\044\016\107\017\114\020" +
    "\045\027\063\031\111\032\066\033\352\034\303\042\037" +
    "\045\311\051\310\052\301\054\061\055\314\056\041\065" +
    "\270\066\275\067\277\070\313\071\271\072\305\073\274" +
    "\074\273\001\001\000\072\004\075\005\067\006\055\007" +
    "\115\010\112\012\044\016\107\017\114\020\045\027\063" +
    "\031\111\032\066\034\354\042\037\045\311\051\310\052" +
    "\301\054\061\055\314\056\041\065\270\066\275\067\277" +
    "\070\313\071\271\072\305\073\274\074\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\074\004\075\005\067" +
    "\006\055\007\115\010\112\012\044\016\107\017\114\020" +
    "\045\027\063\031\111\032\066\033\356\034\303\042\037" +
    "\045\311\051\310\052\301\054\061\055\314\056\041\065" +
    "\270\066\275\067\277\070\313\071\271\072\305\073\274" +
    "\074\273\001\001\000\072\004\075\005\067\006\055\007" +
    "\115\010\112\012\044\016\107\017\114\020\045\027\063" +
    "\031\111\032\066\034\354\042\037\045\311\051\310\052" +
    "\301\054\061\055\314\056\041\065\270\066\275\067\277" +
    "\070\313\071\271\072\305\073\274\074\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\074\004\075\005\067" +
    "\006\055\007\115\010\112\012\044\016\107\017\114\020" +
    "\045\027\063\031\111\032\066\033\362\034\303\042\037" +
    "\045\311\051\310\052\301\054\061\055\314\056\041\065" +
    "\270\066\275\067\277\070\313\071\271\072\305\073\274" +
    "\074\273\001\001\000\072\004\075\005\067\006\055\007" +
    "\115\010\112\012\044\016\107\017\114\020\045\027\063" +
    "\031\111\032\066\034\354\042\037\045\311\051\310\052" +
    "\301\054\061\055\314\056\041\065\270\066\275\067\277" +
    "\070\313\071\271\072\305\073\274\074\273\001\001\000" +
    "\002\001\001\000\074\004\075\005\067\006\055\007\115" +
    "\010\112\012\044\016\107\017\114\020\045\027\063\031" +
    "\111\032\066\033\365\034\303\042\037\045\311\051\310" +
    "\052\301\054\061\055\314\056\041\065\270\066\275\067" +
    "\277\070\313\071\271\072\305\073\274\074\273\001\001" +
    "\000\072\004\075\005\067\006\055\007\115\010\112\012" +
    "\044\016\107\017\114\020\045\027\063\031\111\032\066" +
    "\034\354\042\037\045\311\051\310\052\301\054\061\055" +
    "\314\056\041\065\270\066\275\067\277\070\313\071\271" +
    "\072\305\073\274\074\273\001\001\000\002\001\001\000" +
    "\072\004\075\005\067\006\055\007\115\010\112\012\044" +
    "\016\107\017\114\020\045\027\063\031\111\032\066\034" +
    "\354\042\037\045\311\051\310\052\301\054\061\055\314" +
    "\056\041\065\270\066\275\067\277\070\313\071\271\072" +
    "\305\073\274\074\273\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\045\261\046\263\047\373\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\002\023\003\025\043" +
    "\u0101\045\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\023\003\025\043\u0104\045\031\001\001\000" +
    "\002\001\001\000\014\045\012\053\011\074\003\076\u0106" +
    "\077\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\074\004\075\005\067\006\055\007\115" +
    "\010\112\012\044\016\107\017\114\020\045\027\063\031" +
    "\111\032\066\033\u010a\034\303\042\037\045\311\051\310" +
    "\052\301\054\061\055\314\056\041\065\270\066\275\067" +
    "\277\070\313\071\271\072\305\073\274\074\273\001\001" +
    "\000\072\004\075\005\067\006\055\007\115\010\112\012" +
    "\044\016\107\017\114\020\045\027\063\031\111\032\066" +
    "\034\354\042\037\045\311\051\310\052\301\054\061\055" +
    "\314\056\041\065\270\066\275\067\277\070\313\071\271" +
    "\072\305\073\274\074\273\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }



      public boolean syntaxErrors;
      public void syntax_error(Symbol current_token) {  
          report_error(
              "Syntax error at line " + (current_token.left+1) + ", column "
      + current_token.right, null
          );
      }

  private boolean debug = false;
  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}

  static class Node {
    public ArrayList<Node> children;
    private static int globalCounter = 0;

    public int counter;
    private Object value;

    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }

    public void addChild(Node n){ children.add(n); }

    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }
  }

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // global_code ::= main_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_code",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= global_code EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // global_code ::= main_statement not_main_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_code",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // global_code ::= not_main_statements main_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_code",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // global_code ::= not_main_statements main_statement not_main_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_code",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // not_main_statements ::= not_main_statement not_main_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_main_statements",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // not_main_statements ::= not_main_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_main_statements",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // not_main_statement ::= func_definition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_main_statement",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // not_main_statement ::= var_init 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_main_statement",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // let_bind ::= LET IDENTIFIER EQUAL full_exp 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
               Node n = new Node("LET");
               n.addChild(new Node(i));
               n.addChild((Node)e);
               RESULT = n;
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("let_bind",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bool_duo ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_duo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bool_duo ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_duo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bool_ops ::= EXCLAM bool_duo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bool_ops ::= bool_duo AND bool_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bool_ops ::= bool_duo OR bool_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bool_ops ::= bool_duo IMPL bool_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bool_ops ::= bool_duo EQ bool_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bool_ops ::= bool_duo DIFF bool_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bool_ops_plus ::= bool_duo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops_plus",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bool_ops_plus ::= bool_duo AND bool_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops_plus",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bool_ops_plus ::= bool_duo OR bool_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops_plus",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bool_ops_plus ::= bool_duo IMPL bool_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops_plus",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bool_ops_plus ::= bool_duo EQ bool_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops_plus",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bool_ops_plus ::= bool_duo DIFF bool_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops_plus",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bool_val ::= bool_duo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_val",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // number ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // number ::= number UNDERSCORE INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // int_val ::= number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_val",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // int_val ::= MINUS number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_val",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // rat_val ::= int_val DIV int_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rat_val",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // float_val ::= int_val DOT number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("float_val",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // int_number ::= len_property 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_number",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // int_number ::= int_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_number",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // numeric_regrouped ::= int_number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_regrouped",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // numeric_regrouped ::= rat_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_regrouped",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // numeric_regrouped ::= float_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_regrouped",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // numeric_val ::= numeric_regrouped 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_val",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // all_types ::= TYPE_BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // all_types ::= TYPE_CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // all_types ::= TYPE_INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // all_types ::= TYPE_FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // all_types ::= TYPE_RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // all_types ::= type_seq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // all_types ::= type_dict 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // all_types ::= identifiers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // all_types_val ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // all_types_val ::= bool_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // all_types_val ::= numeric_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // all_types_val ::= dict_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // all_types_val ::= seq_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // all_types_val ::= index 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // all_types_val ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // all_types_val ::= identifiers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type_dict ::= DICT LCROCHET all_types COMMA all_types RCROCHET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dict",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type_dict ::= DICT LCROCHET TOP COMMA all_types RCROCHET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dict",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type_dict ::= DICT LCROCHET all_types COMMA TOP RCROCHET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dict",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type_dict ::= DICT LCROCHET TOP COMMA TOP RCROCHET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dict",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dict_val ::= LBRA dict_content RBRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_val",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dict_content ::= dict_obj 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_content",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // dict_content ::= dict_obj COMMA dict_content 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_content",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // dict_content ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_content",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dict_obj ::= all_types_val COLON all_types_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_obj",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type_seq ::= SEQ LCROCHET all_types RCROCHET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_seq",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type_seq ::= SEQ LCROCHET TOP RCROCHET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_seq",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // seq_temp ::= LAGRA seq_content RAGRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_temp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // seq_temp ::= slice 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_temp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // seq_val ::= seq_temp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_val",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // seq_content ::= all_types_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_content",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // seq_content ::= all_types_val COMMA seq_content 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_content",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // seq_content ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_content",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // len_property ::= IDENTIFIER DOT LEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("len_property",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // index ::= IDENTIFIER LAGRA numeric_val RAGRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // index ::= IDENTIFIER LAGRA IDENTIFIER RAGRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // in_property ::= all_types_val IN all_types_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in_property",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // slice ::= IDENTIFIER LAGRA number COLON int_number RAGRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // slice ::= IDENTIFIER LAGRA COLON int_number RAGRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // slice ::= IDENTIFIER LAGRA number COLON RAGRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // seq_concat ::= seq_temp DOUBLE_COLON seq_temp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_concat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // seq_concat ::= identifiers DOUBLE_COLON seq_temp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_concat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // identifiers ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifiers",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // identifiers ::= IDENTIFIER DOT identifiers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifiers",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declaration ::= identifiers COLON all_types 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declaration_list ::= declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declaration_list ::= declaration COMMA declaration_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // type_definition ::= TDEF identifiers LBRA declaration_list RBRA SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // alias_definition ::= ALIAS all_types all_types SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias_definition",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // func_definition ::= FDEF IDENTIFIER LPAREN declaration_list RPAREN LBRA statements RBRA SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_definition",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // func_definition ::= FDEF IDENTIFIER LPAREN declaration_list RPAREN LBRA statements RBRA COLON all_types SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_definition",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parameters_list ::= all_types_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parameters_list ::= exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parameters_list ::= all_types_val COMMA parameters_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parameters_list ::= exp COMMA parameters_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parameters_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // func_call ::= QUESTION bool_val QUESTION IDENTIFIER LPAREN parameters_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // func_call ::= QUESTION identifiers QUESTION IDENTIFIER LPAREN parameters_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // exp ::= exp_content binary_operators exp_content 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // exp ::= exp_content binary_operators exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // exp ::= func_call binary_operators exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // exp ::= func_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // exp ::= EXCLAM exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // exp ::= LPAREN exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // exp ::= exp_content DOUBLE_COLON exp_content 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // exp ::= exp_content DOUBLE_COLON exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // exp_content ::= numeric_regrouped 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_content",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // exp_content ::= bool_duo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_content",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // exp_content ::= seq_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_content",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // exp_content ::= dict_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_content",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // exp_content ::= identifiers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_content",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // exp_content ::= index 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_content",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // comparison_operators_num_bool ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators_num_bool",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // comparison_operators_num_bool ::= DIFF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators_num_bool",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // comparison_operators_num ::= INFEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators_num",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // comparison_operators_num ::= LCROCHET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators_num",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // numeric_operators ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_operators",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // numeric_operators ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_operators",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // numeric_operators ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_operators",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // numeric_operators ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_operators",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // numeric_operators ::= EXPO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_operators",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // boolean_operators ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // boolean_operators ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // boolean_operators ::= IMPL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // binary_operators ::= comparison_operators_num_bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operators",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // binary_operators ::= comparison_operators_num 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operators",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // binary_operators ::= numeric_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operators",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // binary_operators ::= boolean_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operators",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // var_assigment ::= identifiers EQUAL all_types_val SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_assigment",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // var_assigment ::= identifiers EQUAL exp SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_assigment",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // var_init ::= identifiers COLON all_types EQUAL parameters_list SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_init",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // var_init ::= identifiers COLON all_types SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_init",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // read_var ::= READ identifiers SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_var",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // print_var ::= PRINT all_types_val SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_var",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // print_var ::= PRINT exp SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_var",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // return ::= RETURN all_types_val SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // return ::= RETURN exp SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // return ::= RETURN SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // loop ::= LOOP statements POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // break ::= BREAK SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // break ::= BREAK all_types_val SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // if_statement ::= IF LPAREN exp RPAREN THEN statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // if_statement ::= IF LPAREN exp RPAREN THEN statements ELSE statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // if_statement ::= IF LPAREN bool_val RPAREN THEN statements ELSE statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // if_statement ::= IF LPAREN bool_val RPAREN THEN statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // main_statement ::= MAIN LBRA statements RBRA SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_statement",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // statement ::= exp SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // statement ::= var_init 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // statement ::= var_assigment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // statement ::= read_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // statement ::= print_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // statement ::= return 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // statement ::= loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // statement ::= break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // statement ::= alias_definition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // statement ::= type_definition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
